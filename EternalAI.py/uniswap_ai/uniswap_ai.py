#!/usr/bin/env python
import contextlib as __stickytape_contextlib

@__stickytape_contextlib.contextmanager
def __stickytape_temporary_dir():
    import tempfile
    import shutil
    dir_path = tempfile.mkdtemp()
    try:
        yield dir_path
    finally:
        shutil.rmtree(dir_path)

with __stickytape_temporary_dir() as __stickytape_working_dir:
    def __stickytape_write_module(path, contents):
        import os, os.path

        def make_package(path):
            parts = path.split("/")
            partial_path = __stickytape_working_dir
            for part in parts:
                partial_path = os.path.join(partial_path, part)
                if not os.path.exists(partial_path):
                    os.mkdir(partial_path)
                    with open(os.path.join(partial_path, "__init__.py"), "wb") as f:
                        f.write(b"\n")

        make_package(os.path.dirname(path))

        full_path = os.path.join(__stickytape_working_dir, path)
        with open(full_path, "wb") as module_file:
            module_file.write(contents)

    import sys as __stickytape_sys
    __stickytape_sys.path.insert(0, __stickytape_working_dir)

    __stickytape_write_module('uniswap_ai/__init__.py', b'import decimal\nimport logging\nimport re\nimport time\nimport os\nimport simplejson as json\n\nfrom dotenv import load_dotenv\nfrom uniswap_ai.const import RPC_URL, BSC_CHAIN_ID, BASE_CHAIN_ID, ETH_CHAIN_ID, V1, V2\nfrom uniswap_ai.swap import UniSwapAI, SwapReq\nfrom uniswap_ai.inference import HybridModelInference, InferenceProcessing, AgentInference\n\nload_dotenv(".env")\nlogging.basicConfig(level=logging.INFO, format=\'%(asctime)s - %(levelname)s - %(message)s\')\n\n\ndef call_uniswap(private_key: str, content: str):\n    logging.info(f"call uniswap with content {content}")\n    try:\n        # json content\n        json_match = re.search(r\'\\{.*?\\}\', content, re.DOTALL)\n        if json_match:\n            content = json_match.group(0)\n        else:\n            print("No JSON content found.")\n\n        uniswap_obj = UniSwapAI()\n        json_data = json.loads(content)\n        req = SwapReq(**json_data)\n        req.convert_in_out()\n\n        tx_swap = uniswap_obj.swap_v3(private_key, req)\n    except Exception as e:\n        logging.error(f\'{e}\')\n        return None\n\n    return tx_swap\n\n\ndef process_infer(chain_id: str, tx_hash: str, rpc: str, worker_address: str):\n    if chain_id not in V1 and chain_id not in V2:\n        logging.error(f\'{chain_id} is not support\')\n        return None\n\n    infer_processing = InferenceProcessing()\n    infer_id = infer_processing.get_infer_id(worker_hub_address=worker_address, tx_hash_hex=tx_hash, rpc=rpc)\n    logging.info(f"infer id: {infer_id}")\n\n    result = ""\n    if chain_id in V1:\n        while (True):\n            try:\n                result = infer_processing.get_assignments_by_inference(worker_hub_address=worker_address,\n                                                                       inference_id=infer_id,\n                                                                       rpc=rpc)\n                break\n            except Exception as e:\n                logging.info(f\'Can not get result for inference, try again\')\n                time.sleep(30)\n    elif chain_id in V2:\n        while (True):\n            try:\n                result = infer_processing.get_inference_by_inference_id(worker_hub_address=worker_address,\n                                                                        inference_id=infer_id,\n                                                                        rpc=rpc)\n                break\n            except Exception as e:\n                logging.info(f\'Can not get result for inference, try again\')\n                time.sleep(30)\n    else:\n        logging.error(f\'{chain_id} is not support\')\n        return None\n    if result is not None:\n        logging.info(f\'result: {result}\')\n    else:\n        logging.info(f\'result: None\')\n    return result\n\n\ndef create_agent_infer(private_key: str, chain_id: str, agent_address: str, prompt: str):\n    rpc = RPC_URL.get(chain_id)\n    agent_infer = AgentInference()\n    tx_hash = agent_infer.create_inference_agent(private_key, agent_address, prompt, rpc)\n    logging.info(f"infer tx_hash: {tx_hash}")\n\n    worker_hub_address = agent_infer.get_worker_hub_address()\n    logging.info(f\'worker_hub_address : {worker_hub_address}\')\n\n    content_response = process_infer(chain_id, tx_hash, rpc, worker_hub_address)\n\n    if content_response is not None and len(content_response) > 0:\n        tx_swap = call_uniswap(private_key, content_response)\n        return tx_swap\n    else:\n        return None\n\n\ndef create_hybrid_model_infer(private_key: str, chain_id: str, model_address: str, system_prompt: str, prompt: str,\n                              worker_address: str):\n    rpc = RPC_URL.get(chain_id)\n    hybrid_infer = HybridModelInference()\n    tx_hash = hybrid_infer.create_inference_model(private_key, model_address, system_prompt, prompt, rpc)\n    # tx_hash = "0x72f23026b34fbabb5dda2313ce3cf48b337bb690ff2c8dba6ac1ba6d95b2170a"\n    logging.info(f"infer tx_hash: {tx_hash}")\n\n    content_response = process_infer(chain_id, tx_hash, rpc, worker_address)\n\n    if content_response is not None and len(content_response) > 0:\n        tx_swap = call_uniswap(private_key, content_response)\n        return tx_swap\n    else:\n        return None\n\n\ndef uni_swap_ai(args):\n    if args.command == \'model-infer\':\n        create_hybrid_model_infer(\n            args.pk or os.getenv("PRIVATE_KEY"),\n            args.chain_id or BASE_CHAIN_ID,\n            args.model_address or os.getenv("HYBRID_MODEL_ADDRESS"),\n            args.system_prompt,\n            args.prompt,\n            args.worker_hub_address or os.getenv("WORKER_HUB_ADDRESS"))\n    elif args.command == \'agent-infer\':\n        create_agent_infer(\n            args.pk or os.getenv("PRIVATE_KEY"),\n            args.chain_id or BSC_CHAIN_ID,\n            args.agent_address or os.getenv("AGENT_ADDRESS"),\n            args.prompt)\n')
    __stickytape_write_module('uniswap_ai/const.py', b'ETH_CHAIN_ID = "0x1"\nBSC_CHAIN_ID = "0x38"\nBASE_CHAIN_ID = "0x2105"\n\nV1 = [ETH_CHAIN_ID, BASE_CHAIN_ID]\nV2 = [BSC_CHAIN_ID]\n\nRPC_URL = {\n    ETH_CHAIN_ID: "https://eth.llamarpc.com",\n    BSC_CHAIN_ID: "https://bsc.llamarpc.com",\n    BASE_CHAIN_ID: "https://base.llamarpc.com",\n}\n\nIPFS = "ipfs://"\nLIGHTHOUSE_IPFS = "https://gateway.lighthouse.storage/ipfs/"\n\nAGENT_ABI = [\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "name_",\n                "type": "string"\n            },\n            {\n                "internalType": "string",\n                "name": "symbol_",\n                "type": "string"\n            },\n            {\n                "internalType": "uint256",\n                "name": "amount_",\n                "type": "uint256"\n            },\n            {\n                "internalType": "address",\n                "name": "recipient_",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "promptScheduler_",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "modelAddress_",\n                "type": "address"\n            },\n            {\n                "internalType": "string",\n                "name": "systemPrompt_",\n                "type": "string"\n            },\n            {\n                "internalType": "bytes",\n                "name": "storageInfo_",\n                "type": "bytes"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "constructor"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidAddress",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidData",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidShortString",\n        "type": "error"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "str",\n                "type": "string"\n            }\n        ],\n        "name": "StringTooLong",\n        "type": "error"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "owner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "spender",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            }\n        ],\n        "name": "Approval",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "delegator",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "fromDelegate",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "toDelegate",\n                "type": "address"\n            }\n        ],\n        "name": "DelegateChanged",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "delegate",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "previousBalance",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "newBalance",\n                "type": "uint256"\n            }\n        ],\n        "name": "DelegateVotesChanged",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [],\n        "name": "EIP712DomainChanged",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "hybridModel",\n                "type": "address"\n            }\n        ],\n        "name": "ModelUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "previousOwner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "OwnershipTransferred",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "caller",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "request",\n                "type": "bytes"\n            }\n        ],\n        "name": "PromptPerformed",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "promptScheduler",\n                "type": "address"\n            }\n        ],\n        "name": "PromptSchedulerHubUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "string",\n                "name": "systemPrompt",\n                "type": "string"\n            }\n        ],\n        "name": "SystemPromptUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "from",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "to",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            }\n        ],\n        "name": "Transfer",\n        "type": "event"\n    },\n    {\n        "inputs": [],\n        "name": "CLOCK_MODE",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "DOMAIN_SEPARATOR",\n        "outputs": [\n            {\n                "internalType": "bytes32",\n                "name": "",\n                "type": "bytes32"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "owner",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "spender",\n                "type": "address"\n            }\n        ],\n        "name": "allowance",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "spender",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "amount",\n                "type": "uint256"\n            }\n        ],\n        "name": "approve",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "balanceOf",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            },\n            {\n                "internalType": "uint32",\n                "name": "pos",\n                "type": "uint32"\n            }\n        ],\n        "name": "checkpoints",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint32",\n                        "name": "fromBlock",\n                        "type": "uint32"\n                    },\n                    {\n                        "internalType": "uint224",\n                        "name": "votes",\n                        "type": "uint224"\n                    }\n                ],\n                "internalType": "struct ERC20Votes.Checkpoint",\n                "name": "",\n                "type": "tuple"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "clock",\n        "outputs": [\n            {\n                "internalType": "uint48",\n                "name": "",\n                "type": "uint48"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "decimals",\n        "outputs": [\n            {\n                "internalType": "uint8",\n                "name": "",\n                "type": "uint8"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "spender",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "subtractedValue",\n                "type": "uint256"\n            }\n        ],\n        "name": "decreaseAllowance",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "delegatee",\n                "type": "address"\n            }\n        ],\n        "name": "delegate",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "delegatee",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "nonce",\n                "type": "uint256"\n            },\n            {\n                "internalType": "uint256",\n                "name": "expiry",\n                "type": "uint256"\n            },\n            {\n                "internalType": "uint8",\n                "name": "v",\n                "type": "uint8"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "r",\n                "type": "bytes32"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "s",\n                "type": "bytes32"\n            }\n        ],\n        "name": "delegateBySig",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "delegates",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "eip712Domain",\n        "outputs": [\n            {\n                "internalType": "bytes1",\n                "name": "fields",\n                "type": "bytes1"\n            },\n            {\n                "internalType": "string",\n                "name": "name",\n                "type": "string"\n            },\n            {\n                "internalType": "string",\n                "name": "version",\n                "type": "string"\n            },\n            {\n                "internalType": "uint256",\n                "name": "chainId",\n                "type": "uint256"\n            },\n            {\n                "internalType": "address",\n                "name": "verifyingContract",\n                "type": "address"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "salt",\n                "type": "bytes32"\n            },\n            {\n                "internalType": "uint256[]",\n                "name": "extensions",\n                "type": "uint256[]"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "fetchCode",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "logic",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getFileStorageChunkInfo",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint256",\n                        "name": "size",\n                        "type": "uint256"\n                    },\n                    {\n                        "components": [\n                            {\n                                "internalType": "address",\n                                "name": "pointer",\n                                "type": "address"\n                            },\n                            {\n                                "internalType": "uint32",\n                                "name": "start",\n                                "type": "uint32"\n                            },\n                            {\n                                "internalType": "uint32",\n                                "name": "end",\n                                "type": "uint32"\n                            }\n                        ],\n                        "internalType": "struct BytecodeSlice[]",\n                        "name": "slices",\n                        "type": "tuple[]"\n                    }\n                ],\n                "internalType": "struct File",\n                "name": "file",\n                "type": "tuple"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getModelAddress",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "timepoint",\n                "type": "uint256"\n            }\n        ],\n        "name": "getPastTotalSupply",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "timepoint",\n                "type": "uint256"\n            }\n        ],\n        "name": "getPastVotes",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getPromptSchedulerAddress",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "id",\n                "type": "uint256"\n            }\n        ],\n        "name": "getResultById",\n        "outputs": [\n            {\n                "internalType": "bytes",\n                "name": "",\n                "type": "bytes"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getStorageInfo",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "address",\n                        "name": "contractAddress",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "string",\n                        "name": "filename",\n                        "type": "string"\n                    }\n                ],\n                "internalType": "struct IUtilityAgent.StorageInfo",\n                "name": "",\n                "type": "tuple"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getStorageMode",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getSystemPrompt",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "getVotes",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "spender",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "addedValue",\n                "type": "uint256"\n            }\n        ],\n        "name": "increaseAllowance",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "name",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "owner",\n                "type": "address"\n            }\n        ],\n        "name": "nonces",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "numCheckpoints",\n        "outputs": [\n            {\n                "internalType": "uint32",\n                "name": "",\n                "type": "uint32"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "owner",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "owner",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "spender",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            },\n            {\n                "internalType": "uint256",\n                "name": "deadline",\n                "type": "uint256"\n            },\n            {\n                "internalType": "uint8",\n                "name": "v",\n                "type": "uint8"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "r",\n                "type": "bytes32"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "s",\n                "type": "bytes32"\n            }\n        ],\n        "name": "permit",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "request",\n                "type": "bytes"\n            }\n        ],\n        "name": "prompt",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "inferId",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "renounceOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "symbol",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "totalSupply",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "to",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "amount",\n                "type": "uint256"\n            }\n        ],\n        "name": "transfer",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "from",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "to",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "amount",\n                "type": "uint256"\n            }\n        ],\n        "name": "transferFrom",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "transferOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "filename",\n                "type": "string"\n            }\n        ],\n        "name": "updateFileName",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "modelAddress",\n                "type": "address"\n            }\n        ],\n        "name": "updateModelAddress",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "promptScheduler",\n                "type": "address"\n            }\n        ],\n        "name": "updatePromptScheduler",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "systemPrompt",\n                "type": "string"\n            }\n        ],\n        "name": "updateSystemPrompt",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    }\n]\n\nHYBRID_MODEL_ABI = [\n    {\n        "inputs": [],\n        "name": "ModelIdAlreadySet",\n        "type": "error"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "newValue",\n                "type": "uint256"\n            }\n        ],\n        "name": "IdentifierUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "uint8",\n                "name": "version",\n                "type": "uint8"\n            }\n        ],\n        "name": "Initialized",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "string",\n                "name": "newValue",\n                "type": "string"\n            }\n        ],\n        "name": "MetadataUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "string",\n                "name": "newValue",\n                "type": "string"\n            }\n        ],\n        "name": "NameUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "previousOwner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "OwnershipTransferred",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "Paused",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "Unpaused",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "newAddress",\n                "type": "address"\n            }\n        ],\n        "name": "WorkerHubUpdate",\n        "type": "event"\n    },\n    {\n        "inputs": [],\n        "name": "identifier",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "bool",\n                "name": "_rawFlag",\n                "type": "bool"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "address",\n                "name": "_creator",\n                "type": "address"\n            },\n            {\n                "internalType": "bool",\n                "name": "_flag",\n                "type": "bool"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "address",\n                "name": "_creator",\n                "type": "address"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_workerHub",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_modelCollection",\n                "type": "address"\n            },\n            {\n                "internalType": "uint256",\n                "name": "_identifier",\n                "type": "uint256"\n            },\n            {\n                "internalType": "string",\n                "name": "_name",\n                "type": "string"\n            },\n            {\n                "internalType": "string",\n                "name": "_metadata",\n                "type": "string"\n            }\n        ],\n        "name": "initialize",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "metadata",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "modelCollection",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "name",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "owner",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "pause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "paused",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "renounceOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_modelId",\n                "type": "uint256"\n            }\n        ],\n        "name": "setModelId",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "transferOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "unpause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_identifier",\n                "type": "uint256"\n            }\n        ],\n        "name": "updateIdentifier",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "_metadata",\n                "type": "string"\n            }\n        ],\n        "name": "updateMetadata",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "string",\n                "name": "_name",\n                "type": "string"\n            }\n        ],\n        "name": "updateName",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_workerHub",\n                "type": "address"\n            }\n        ],\n        "name": "updateWorkerHub",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "version",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "pure",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "workerHub",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "stateMutability": "payable",\n        "type": "receive"\n    }\n]\n\nWORKER_HUB_ABI = [\n    {\n        "inputs": [],\n        "name": "AlreadyCommitted",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "AlreadyRevealed",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "AlreadySeized",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "AlreadySubmitted",\n        "type": "error"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes32",\n                "name": "value",\n                "type": "bytes32"\n            }\n        ],\n        "name": "Bytes32Set_DuplicatedValue",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "CannotFastForward",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "CommitTimeout",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "FailedTransfer",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidAddress",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidCommitment",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidContext",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidData",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidInferenceStatus",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidMiner",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidNonce",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidReveal",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidRole",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "NotCommitted",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "NotEnoughMiners",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "OnlyAssignedWorker",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "RevealTimeout",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "SubmitTimeout",\n        "type": "error"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            }\n        ],\n        "name": "Uint256Set_DuplicatedValue",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "Unauthorized",\n        "type": "error"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assigmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes32",\n                "name": "commitment",\n                "type": "bytes32"\n            }\n        ],\n        "name": "CommitmentSubmission",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "chainId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "modelAddress",\n                "type": "address"\n            },\n            {\n                "components": [\n                    {\n                        "internalType": "address",\n                        "name": "receiver",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "amount",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "enum IWorkerHub.DAOTokenReceiverRole",\n                        "name": "role",\n                        "type": "uint8"\n                    }\n                ],\n                "indexed": False,\n                "internalType": "struct IWorkerHub.DAOTokenReceiverInfor[]",\n                "name": "receivers",\n                "type": "tuple[]"\n            }\n        ],\n        "name": "DAOTokenMintedV2",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint16",\n                        "name": "minerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "userPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "referrerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "refereePercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "l2OwnerPercentage",\n                        "type": "uint16"\n                    }\n                ],\n                "indexed": False,\n                "internalType": "struct IWorkerHub.DAOTokenPercentage",\n                "name": "oldValue",\n                "type": "tuple"\n            },\n            {\n                "components": [\n                    {\n                        "internalType": "uint16",\n                        "name": "minerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "userPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "referrerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "refereePercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "l2OwnerPercentage",\n                        "type": "uint16"\n                    }\n                ],\n                "indexed": False,\n                "internalType": "struct IWorkerHub.DAOTokenPercentage",\n                "name": "newValue",\n                "type": "tuple"\n            }\n        ],\n        "name": "DAOTokenPercentageUpdated",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "enum IWorkerHub.InferenceStatus",\n                "name": "newStatus",\n                "type": "uint8"\n            }\n        ],\n        "name": "InferenceStatusUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "uint8",\n                "name": "version",\n                "type": "uint8"\n            }\n        ],\n        "name": "Initialized",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assignmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            }\n        ],\n        "name": "MinerRoleSeized",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assignmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint40",\n                "name": "expiredAt",\n                "type": "uint40"\n            }\n        ],\n        "name": "NewAssignment",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "model",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "creator",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "originInferenceId",\n                "type": "uint256"\n            }\n        ],\n        "name": "NewInference",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "previousOwner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "OwnershipTransferred",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "Paused",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "model",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "creator",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "originInferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "input",\n                "type": "bytes"\n            },\n            {\n                "indexed": False,\n                "internalType": "bool",\n                "name": "flag",\n                "type": "bool"\n            }\n        ],\n        "name": "RawSubmitted",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assigmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint40",\n                "name": "nonce",\n                "type": "uint40"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "output",\n                "type": "bytes"\n            }\n        ],\n        "name": "RevealSubmission",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assigmentId",\n                "type": "uint256"\n            }\n        ],\n        "name": "SolutionSubmission",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assignmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "data",\n                "type": "bytes"\n            }\n        ],\n        "name": "StreamedData",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "Unpaused",\n        "type": "event"\n    },\n    {\n        "inputs": [],\n        "name": "assignmentNumber",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "name": "assignments",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "commitment",\n                "type": "bytes32"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "digest",\n                "type": "bytes32"\n            },\n            {\n                "internalType": "uint40",\n                "name": "revealNonce",\n                "type": "uint40"\n            },\n            {\n                "internalType": "address",\n                "name": "worker",\n                "type": "address"\n            },\n            {\n                "internalType": "enum IWorkerHub.AssignmentRole",\n                "name": "role",\n                "type": "uint8"\n            },\n            {\n                "internalType": "enum IWorkerHub.Vote",\n                "name": "vote",\n                "type": "uint8"\n            },\n            {\n                "internalType": "bytes",\n                "name": "output",\n                "type": "bytes"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_assignId",\n                "type": "uint256"\n            },\n            {\n                "internalType": "bytes32",\n                "name": "_commitment",\n                "type": "bytes32"\n            }\n        ],\n        "name": "commit",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_assignmentId",\n                "type": "uint256"\n            }\n        ],\n        "name": "getAssignmentInfo",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint256",\n                        "name": "inferenceId",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "bytes32",\n                        "name": "commitment",\n                        "type": "bytes32"\n                    },\n                    {\n                        "internalType": "bytes32",\n                        "name": "digest",\n                        "type": "bytes32"\n                    },\n                    {\n                        "internalType": "uint40",\n                        "name": "revealNonce",\n                        "type": "uint40"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "worker",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "enum IWorkerHub.AssignmentRole",\n                        "name": "role",\n                        "type": "uint8"\n                    },\n                    {\n                        "internalType": "enum IWorkerHub.Vote",\n                        "name": "vote",\n                        "type": "uint8"\n                    },\n                    {\n                        "internalType": "bytes",\n                        "name": "output",\n                        "type": "bytes"\n                    }\n                ],\n                "internalType": "struct IWorkerHub.Assignment",\n                "name": "",\n                "type": "tuple"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_inferenceId",\n                "type": "uint256"\n            }\n        ],\n        "name": "getAssignmentsByInference",\n        "outputs": [\n            {\n                "internalType": "uint256[]",\n                "name": "",\n                "type": "uint256[]"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_inferenceId",\n                "type": "uint256"\n            }\n        ],\n        "name": "getInferenceInfo",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint256[]",\n                        "name": "assignments",\n                        "type": "uint256[]"\n                    },\n                    {\n                        "internalType": "bytes",\n                        "name": "input",\n                        "type": "bytes"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "value",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "feeL2",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "feeTreasury",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "modelAddress",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "uint40",\n                        "name": "submitTimeout",\n                        "type": "uint40"\n                    },\n                    {\n                        "internalType": "uint40",\n                        "name": "commitTimeout",\n                        "type": "uint40"\n                    },\n                    {\n                        "internalType": "uint40",\n                        "name": "revealTimeout",\n                        "type": "uint40"\n                    },\n                    {\n                        "internalType": "enum IWorkerHub.InferenceStatus",\n                        "name": "status",\n                        "type": "uint8"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "creator",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "processedMiner",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "referrer",\n                        "type": "address"\n                    }\n                ],\n                "internalType": "struct IWorkerHub.Inference",\n                "name": "",\n                "type": "tuple"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_modelAddress",\n                "type": "address"\n            }\n        ],\n        "name": "getMinFeeToUse",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getTreasuryAddress",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "address",\n                "name": "_creator",\n                "type": "address"\n            },\n            {\n                "internalType": "bool",\n                "name": "_flag",\n                "type": "bool"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "address",\n                "name": "_creator",\n                "type": "address"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "inferenceNumber",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_wEAI",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_l2Owner",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_treasury",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_daoToken",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_stakingHub",\n                "type": "address"\n            },\n            {\n                "internalType": "uint16",\n                "name": "_feeL2Percentage",\n                "type": "uint16"\n            },\n            {\n                "internalType": "uint16",\n                "name": "_feeTreasuryPercentage",\n                "type": "uint16"\n            },\n            {\n                "internalType": "uint8",\n                "name": "_minerRequirement",\n                "type": "uint8"\n            },\n            {\n                "internalType": "uint40",\n                "name": "_submitDuration",\n                "type": "uint40"\n            },\n            {\n                "internalType": "uint40",\n                "name": "_commitDuration",\n                "type": "uint40"\n            },\n            {\n                "internalType": "uint40",\n                "name": "_revealDuration",\n                "type": "uint40"\n            },\n            {\n                "internalType": "uint16",\n                "name": "_feeRatioMinerValidor",\n                "type": "uint16"\n            },\n            {\n                "internalType": "uint256",\n                "name": "_daoTokenReward",\n                "type": "uint256"\n            },\n            {\n                "components": [\n                    {\n                        "internalType": "uint16",\n                        "name": "minerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "userPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "referrerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "refereePercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "l2OwnerPercentage",\n                        "type": "uint16"\n                    }\n                ],\n                "internalType": "struct IWorkerHub.DAOTokenPercentage",\n                "name": "_daoTokenPercentage",\n                "type": "tuple"\n            }\n        ],\n        "name": "initialize",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "owner",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "pause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "paused",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address[]",\n                "name": "_referrers",\n                "type": "address[]"\n            },\n            {\n                "internalType": "address[]",\n                "name": "_referees",\n                "type": "address[]"\n            }\n        ],\n        "name": "registerReferrer",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "renounceOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_inferenceId",\n                "type": "uint256"\n            }\n        ],\n        "name": "resolveInference",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_assignId",\n                "type": "uint256"\n            },\n            {\n                "internalType": "uint40",\n                "name": "_nonce",\n                "type": "uint40"\n            },\n            {\n                "internalType": "bytes",\n                "name": "_data",\n                "type": "bytes"\n            }\n        ],\n        "name": "reveal",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_assignmentId",\n                "type": "uint256"\n            }\n        ],\n        "name": "seizeMinerRole",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_newDAOTokenReward",\n                "type": "uint256"\n            }\n        ],\n        "name": "setDAOTokenReward",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_wEAI",\n                "type": "address"\n            }\n        ],\n        "name": "setWEAIAddress",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_assigmentId",\n                "type": "uint256"\n            },\n            {\n                "internalType": "bytes",\n                "name": "_data",\n                "type": "bytes"\n            }\n        ],\n        "name": "submitSolution",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "transferOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "unpause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bool",\n                "name": "_isReferred",\n                "type": "bool"\n            }\n        ],\n        "name": "validateDAOSupplyIncrease",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "notReachedLimit",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "version",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "pure",\n        "type": "function"\n    },\n    {\n        "stateMutability": "payable",\n        "type": "receive"\n    }\n]\n\nPROMPT_SCHEDULER_ABI = [\n    {\n        "inputs": [],\n        "name": "AlreadyCommitted",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "AlreadyRevealed",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "AlreadySeized",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "AlreadySubmitted",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "CannotFastForward",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "CommitTimeout",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidAddress",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidCommitment",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidContext",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidData",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidInferenceStatus",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidMiner",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidNonce",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidReveal",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "InvalidRole",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "NotCommitted",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "NotEnoughMiners",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "OnlyAssignedWorker",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "RevealTimeout",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "SubmitTimeout",\n        "type": "error"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            }\n        ],\n        "name": "Uint256Set_DuplicatedValue",\n        "type": "error"\n    },\n    {\n        "inputs": [],\n        "name": "Unauthorized",\n        "type": "error"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assigmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes32",\n                "name": "commitment",\n                "type": "bytes32"\n            }\n        ],\n        "name": "CommitmentSubmission",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "chainId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "modelAddress",\n                "type": "address"\n            },\n            {\n                "components": [\n                    {\n                        "internalType": "address",\n                        "name": "receiver",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "amount",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "enum IWorkerHub.DAOTokenReceiverRole",\n                        "name": "role",\n                        "type": "uint8"\n                    }\n                ],\n                "indexed": False,\n                "internalType": "struct IWorkerHub.DAOTokenReceiverInfor[]",\n                "name": "receivers",\n                "type": "tuple[]"\n            }\n        ],\n        "name": "DAOTokenMintedV2",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint16",\n                        "name": "minerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "userPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "referrerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "refereePercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "l2OwnerPercentage",\n                        "type": "uint16"\n                    }\n                ],\n                "indexed": False,\n                "internalType": "struct IWorkerHub.DAOTokenPercentage",\n                "name": "oldValue",\n                "type": "tuple"\n            },\n            {\n                "components": [\n                    {\n                        "internalType": "uint16",\n                        "name": "minerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "userPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "referrerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "refereePercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "l2OwnerPercentage",\n                        "type": "uint16"\n                    }\n                ],\n                "indexed": False,\n                "internalType": "struct IWorkerHub.DAOTokenPercentage",\n                "name": "newValue",\n                "type": "tuple"\n            }\n        ],\n        "name": "DAOTokenPercentageUpdated",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "enum IWorkerHub.InferenceStatus",\n                "name": "newStatus",\n                "type": "uint8"\n            }\n        ],\n        "name": "InferenceStatusUpdate",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "uint8",\n                "name": "version",\n                "type": "uint8"\n            }\n        ],\n        "name": "Initialized",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assignmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            }\n        ],\n        "name": "MinerRoleSeized",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assignmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint40",\n                "name": "expiredAt",\n                "type": "uint40"\n            }\n        ],\n        "name": "NewAssignment",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "model",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "creator",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "originInferenceId",\n                "type": "uint256"\n            }\n        ],\n        "name": "NewInference",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "previousOwner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "OwnershipTransferred",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "Paused",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "model",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "creator",\n                "type": "address"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "value",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint256",\n                "name": "originInferenceId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "input",\n                "type": "bytes"\n            },\n            {\n                "indexed": False,\n                "internalType": "bool",\n                "name": "flag",\n                "type": "bool"\n            }\n        ],\n        "name": "RawSubmitted",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assigmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "uint40",\n                "name": "nonce",\n                "type": "uint40"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "output",\n                "type": "bytes"\n            }\n        ],\n        "name": "RevealSubmission",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "address",\n                "name": "miner",\n                "type": "address"\n            },\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "inferId",\n                "type": "uint256"\n            }\n        ],\n        "name": "SolutionSubmission",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": True,\n                "internalType": "uint256",\n                "name": "assignmentId",\n                "type": "uint256"\n            },\n            {\n                "indexed": False,\n                "internalType": "bytes",\n                "name": "data",\n                "type": "bytes"\n            }\n        ],\n        "name": "StreamedData",\n        "type": "event"\n    },\n    {\n        "anonymous": False,\n        "inputs": [\n            {\n                "indexed": False,\n                "internalType": "address",\n                "name": "account",\n                "type": "address"\n            }\n        ],\n        "name": "Unpaused",\n        "type": "event"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_inferenceId",\n                "type": "uint256"\n            }\n        ],\n        "name": "getInferenceInfo",\n        "outputs": [\n            {\n                "components": [\n                    {\n                        "internalType": "uint256",\n                        "name": "value",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "feeL2",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "uint256",\n                        "name": "feeTreasury",\n                        "type": "uint256"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "modelAddress",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "uint40",\n                        "name": "submitTimeout",\n                        "type": "uint40"\n                    },\n                    {\n                        "internalType": "enum IWorkerHub.InferenceStatus",\n                        "name": "status",\n                        "type": "uint8"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "creator",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "processedMiner",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "address",\n                        "name": "referrer",\n                        "type": "address"\n                    },\n                    {\n                        "internalType": "bytes",\n                        "name": "input",\n                        "type": "bytes"\n                    },\n                    {\n                        "internalType": "bytes",\n                        "name": "output",\n                        "type": "bytes"\n                    }\n                ],\n                "internalType": "struct IWorkerHub.Inference",\n                "name": "",\n                "type": "tuple"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_modelAddress",\n                "type": "address"\n            }\n        ],\n        "name": "getMinFeeToUse",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getMinerRequirement",\n        "outputs": [\n            {\n                "internalType": "uint8",\n                "name": "",\n                "type": "uint8"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getSubmitDuration",\n        "outputs": [\n            {\n                "internalType": "uint40",\n                "name": "",\n                "type": "uint40"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "getTreasuryAddress",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "address",\n                "name": "_creator",\n                "type": "address"\n            },\n            {\n                "internalType": "bool",\n                "name": "_flag",\n                "type": "bool"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "bytes",\n                "name": "_input",\n                "type": "bytes"\n            },\n            {\n                "internalType": "address",\n                "name": "_creator",\n                "type": "address"\n            }\n        ],\n        "name": "infer",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "payable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "inferenceNumber",\n        "outputs": [\n            {\n                "internalType": "uint256",\n                "name": "",\n                "type": "uint256"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_wEAI",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_l2Owner",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_treasury",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_daoToken",\n                "type": "address"\n            },\n            {\n                "internalType": "address",\n                "name": "_stakingHub",\n                "type": "address"\n            },\n            {\n                "internalType": "uint16",\n                "name": "_feeL2Percentage",\n                "type": "uint16"\n            },\n            {\n                "internalType": "uint16",\n                "name": "_feeTreasuryPercentage",\n                "type": "uint16"\n            },\n            {\n                "internalType": "uint8",\n                "name": "_minerRequirement",\n                "type": "uint8"\n            },\n            {\n                "internalType": "uint40",\n                "name": "_submitDuration",\n                "type": "uint40"\n            },\n            {\n                "internalType": "uint16",\n                "name": "_feeRatioMinerValidor",\n                "type": "uint16"\n            },\n            {\n                "internalType": "uint256",\n                "name": "_daoTokenReward",\n                "type": "uint256"\n            },\n            {\n                "components": [\n                    {\n                        "internalType": "uint16",\n                        "name": "minerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "userPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "referrerPercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "refereePercentage",\n                        "type": "uint16"\n                    },\n                    {\n                        "internalType": "uint16",\n                        "name": "l2OwnerPercentage",\n                        "type": "uint16"\n                    }\n                ],\n                "internalType": "struct IWorkerHub.DAOTokenPercentage",\n                "name": "_daoTokenPercentage",\n                "type": "tuple"\n            }\n        ],\n        "name": "initialize",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "owner",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "pause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "paused",\n        "outputs": [\n            {\n                "internalType": "bool",\n                "name": "",\n                "type": "bool"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address[]",\n                "name": "_referrers",\n                "type": "address[]"\n            },\n            {\n                "internalType": "address[]",\n                "name": "_referees",\n                "type": "address[]"\n            }\n        ],\n        "name": "registerReferrer",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "renounceOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_daoToken",\n                "type": "address"\n            }\n        ],\n        "name": "setDAOTokenAddress",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_stakingHub",\n                "type": "address"\n            }\n        ],\n        "name": "setStakingHubAddress",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint40",\n                "name": "_submitDuration",\n                "type": "uint40"\n            }\n        ],\n        "name": "setSubmitDuration",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "_wEAI",\n                "type": "address"\n            }\n        ],\n        "name": "setWEAIAddress",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "stakingHub",\n        "outputs": [\n            {\n                "internalType": "address",\n                "name": "",\n                "type": "address"\n            }\n        ],\n        "stateMutability": "view",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "uint256",\n                "name": "_inferId",\n                "type": "uint256"\n            },\n            {\n                "internalType": "bytes",\n                "name": "_data",\n                "type": "bytes"\n            }\n        ],\n        "name": "submitSolution",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [\n            {\n                "internalType": "address",\n                "name": "newOwner",\n                "type": "address"\n            }\n        ],\n        "name": "transferOwnership",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "unpause",\n        "outputs": [],\n        "stateMutability": "nonpayable",\n        "type": "function"\n    },\n    {\n        "inputs": [],\n        "name": "version",\n        "outputs": [\n            {\n                "internalType": "string",\n                "name": "",\n                "type": "string"\n            }\n        ],\n        "stateMutability": "pure",\n        "type": "function"\n    },\n    {\n        "stateMutability": "payable",\n        "type": "receive"\n    }\n]\n')
    __stickytape_write_module('uniswap_ai/swap.py', b'import logging\nimport decimal\n\nimport requests\nfrom web3 import Web3\nfrom web3.middleware import geth_poa_middleware\nfrom uniswap.constants import ETH_ADDRESS\nfrom uniswap_ai.const import RPC_URL, ETH_CHAIN_ID\nfrom dataclasses import dataclass\nfrom uniswap import Uniswap\n\n"""\nYou are an intelligent assistant specialized in cryptocurrency trading. When a user requests a transaction, please respond in a specific JSON format.\n\nFor example, if the user says: "Swap 1 ETH to USDT on Uniswap with Ethereum Chain(or Base chain, BNB chain...)" you should respond as follows:\n\n{\n  "token_in": "name of Input token",\n  "token_in_amount": 1.0,\n  "token_out": "Name of Ouput token",\n}\n\nMake sure that the token addresses are accurate and comply with ERC20 standards.\n"""\n\n"""\nYou are an intelligent assistant specialized in cryptocurrency trading. When a user requests a transaction, please respond in a specific JSON format.\\n\\nFor example, if the user says: \\"Swap 1 ETH to USDT on Uniswap with Ethereum Chain (or Base chain, BNB chain...)\\" you should respond as follows:\\n\\n{\\n  \\"token_in\\": \\"name of Input token\\",\\n  \\"token_in_amount\\": 1.0,\\n  \\"token_out\\": \\"Name of Output token\\"\\n}\\n\\nMake sure that the token addresses are accurate and comply with ERC20 standards.\n"""\n\n\n@dataclass\nclass SwapReq:\n    token_in: str = ""\n    token_in_amount: decimal = 0\n    token_out: str = ""\n\n    def convert_in_out(self):\n        if self.token_in.lower() == "eth":\n            self.token_in = ETH_ADDRESS\n        else:\n            token_address = self.convert_token_address(self.token_in.lower())\n            if token_address is None:\n                self.token_in = ETH_ADDRESS\n            else:\n                self.token_in = token_address\n\n        token_address = self.convert_token_address(self.token_out.lower())\n        if token_address is None:\n            self.token_out = ETH_ADDRESS\n        else:\n            self.token_out = token_address\n\n    def get_token_address_from_info(self, token_info: dict, symbol: str):\n        result = None\n        if token_info.get("symbol") != "" and token_info.get("symbol") is not None and token_info.get(\n                "symbol") == symbol:\n            if token_info.get("platforms") is not None:\n                if token_info.get("platforms").get("ethereum") is not None and token_info.get("platforms").get(\n                        "ethereum") != "":\n                    result = token_info.get("platforms").get("ethereum")\n        return result\n\n    def convert_token_address(self, symbol: str):\n        result = None\n        token_info_response = requests.get(f"https://api.coingecko.com/api/v3/coins/{symbol}")\n        if token_info_response.status_code == 200:\n            result = self.get_token_address_from_info(token_info_response.json())\n        if result is None:\n            token_info_list_response = requests.get(\n                "https://api.coingecko.com/api/v3/coins/list?include_platform=true&status=active")\n            if token_info_list_response.status_code == 200:\n                for token_info in token_info_list_response.json():\n                    result = self.get_token_address_from_info(token_info, symbol)\n                    if result is not None:\n                        break\n\n        return result\n\n\n@dataclass\nclass UniSwapAI:\n    web3: Web3 = None\n\n    def create_web3(self, rpc: str = ""):\n        if self.web3 is None:\n            if rpc != "":\n                self.web3 = Web3(Web3.HTTPProvider(rpc))\n            else:\n                # Default:\n                self.web3 = Web3(Web3.HTTPProvider(RPC_URL[ETH_CHAIN_ID]))\n            self.web3.middleware_onion.inject(geth_poa_middleware, layer=0)\n\n    def swap_v3(self, privateKey: str, req: SwapReq, rpc: str = ""):\n        if privateKey is None or len(privateKey) == 0:\n            raise Exception(\'Private key missing\')\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            account = self.web3.eth.account.from_key(privateKey)\n            account_address = Web3.to_checksum_address(account.address)\n\n            """Checks price impact for a pool with liquidity."""\n            uni_swap = Uniswap(address=account_address, private_key=privateKey, web3=self.web3, version=3)\n\n            token_a = Web3.to_checksum_address(req.token_in)\n            amount_in = self.web3.to_wei(req.token_in_amount, \'ether\')\n\n            token_b = Web3.to_checksum_address(req.token_out)\n\n            # Compare the results with the output of:\n            logging.info(f"https://app.uniswap.org/#/swap?use=v3&inputCurrency={token_a}&outputCurrency={token_b}")\n            impact = uni_swap.estimate_price_impact(token_a, token_b, amount_in, fee=10000)\n            logging.info(f"Impact for buying VXV on v3 with {amount_in / 10 ** 18} ETH:  {impact}")\n\n            if token_a != ETH_ADDRESS:\n                approved = uni_swap._is_approved(token_b)\n                logging.info(f"approved: {approved}")\n\n                if not approved:\n                    logging.info("call approved")\n                    uni_swap.approve(token_b, max_approval=None)\n\n                    approved = uni_swap._is_approved(token_b)\n                    logging.info(f"check approved again: {approved}")\n\n            logging.info(f"call swap")\n            tx = uni_swap.make_trade(token_a, token_b, amount_in, uni_swap.address, slippage=impact)\n            logging.info(f"sending tx: {tx.to_checksum_address()}")\n            return tx\n\n    # def swap(self, privateKey: str, req: SwapReq):\n    #     if self.web3 is None:\n    #         self.web3 = Web3(Web3.HTTPProvider(rpc_url))\n    #     if self.web3.is_connected():\n    #         if privateKey is None or len(privateKey) == 0:\n    #             privateKey = os.getenv("PRIVATE_KEY")\n    #\n    #         account = self.web3.eth.account.from_key(privateKey)\n    #         account_address = account.address\n    #\n    #         amount_in = self.web3.to_wei(req.token_a_amount, \'ether\')\n    #         amount_out_min = self.web3.to_wei(req.token_b_out_min, \'ether\')\n    #         deadline = self.web3.eth.get_block(\'latest\')[\'timestamp\'] + 120\n    #\n    #         if self.uniswap_router_address == "":\n    #             self.uniswap_router_address = "0xe592427a0aece92de3edee1f18e0157c05861564"\n    #\n    #         uniswap_router = self.web3.eth.contract(address=self.uniswap_router_address, abi=uniswap_router_abi)\n    #         txn = uniswap_router.functions.swapExactTokensForTokens(\n    #             amount_in,\n    #             amount_out_min,\n    #             [token_a, token_b],\n    #             account.address,\n    #             deadline\n    #         ).buildTransaction({\n    #             \'from\': account_address,\n    #             \'gas\': 200000,\n    #             # \'gasPrice\': web3.toWei(\'50\', \'gwei\'),\n    #             \'nonce\': self.web3.eth.get_transaction_count(account_address),\n    #         })\n    #\n    #         signed_txn = self.web3.eth.account.sign_transaction(txn, private_key)\n    #         txn_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)\n    #\n    #         logging.info(f\'Transaction hash: {self.web3.to_hex(txn_hash)}\')\n    #     else:\n    #         raise Exception(\'Uniswap: web3 is not connected\')\n')
    __stickytape_write_module('uniswap_ai/inference.py', b'import base64\nimport logging\nimport os\n\nimport requests\nimport simplejson as json\n\nfrom dataclasses import dataclass, asdict\nfrom typing import List\nfrom web3 import Web3\nfrom web3.types import HexStr\nfrom web3.middleware import geth_poa_middleware\nfrom uniswap_ai.const import HYBRID_MODEL_ABI, AGENT_ABI, RPC_URL, ETH_CHAIN_ID, WORKER_HUB_ABI, PROMPT_SCHEDULER_ABI, \\\n    LIGHTHOUSE_IPFS, IPFS\n\n\n@dataclass()\nclass InferenceResponse:\n    result_uri: str\n    storage: str\n    data: str\n\n\n@dataclass\nclass Inference:\n    user_prompt: str\n    system_prompt: str\n\n\n@dataclass()\nclass LLMInferMessage:\n    content: str = ""\n    role: str = ""\n\n\n@dataclass()\nclass LLMInferRequest:\n    messages: List[LLMInferMessage] = None\n    max_token: int = 4096\n    stream: bool = False\n\n\n@dataclass()\nclass AgentInference:\n    web3: Web3 = None\n    agent_address: str = None\n\n    def create_web3(self, rpc: str):\n        if self.web3 is None:\n            if rpc != "":\n                self.web3 = Web3(Web3.HTTPProvider(rpc))\n            else:\n                # Default:\n                self.web3 = Web3(Web3.HTTPProvider(RPC_URL[ETH_CHAIN_ID]))\n            self.web3.middleware_onion.inject(geth_poa_middleware, layer=0)\n\n    def get_agent_address(self, agent_address: str):\n        if self.agent_address is None or self.agent_address == "":\n            self.agent_address = agent_address\n            if self.agent_address == "":\n                raise Exception("Agent address missing")\n\n    def get_system_prompt(self, agent_address: str, rpc: str):\n        logging.info(f"Get system prompt from agent...")\n\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            self.get_agent_address(agent_address)\n            agent_contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.agent_address),\n                                                    abi=AGENT_ABI)\n            try:\n                system_prompt = agent_contract.functions.getSystemPrompt().call()\n                return system_prompt\n            except Exception as e:\n                logging.error(f\'{e}\')\n                raise e\n        return ""\n\n    def get_worker_hub_address(self):\n        self.get_agent_address(\'\')\n        agent_contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.agent_address),\n                                                abi=AGENT_ABI)\n        return agent_contract.functions.getPromptSchedulerAddress().call()\n\n    def create_inference_agent(self, private_key: str, agent_address: str, prompt: str, rpc: str):\n        logging.info(f"Creating inference agent...")\n        if private_key == "" or private_key is None:\n            raise Exception("Private key missing")\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            self.get_agent_address(agent_address)\n            account = self.web3.eth.account.from_key(private_key)\n            account_address = Web3.to_checksum_address(account.address)\n\n            agent_contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.agent_address),\n                                                    abi=AGENT_ABI)\n            system_prompt = self.get_system_prompt(agent_address, rpc)\n            logging.info(f"system_prompt: {system_prompt}")\n            req = LLMInferRequest()\n            req.messages = [LLMInferMessage(content=prompt, role="user"),\n                            LLMInferMessage(content=system_prompt, role="system")]\n            json_request = json.dumps(asdict(req))\n\n            func = agent_contract.functions.prompt(json_request.encode("utf-8"))\n            txn = func.build_transaction({\n                \'from\': account_address,\n                # \'gas\': 200000,\n                # \'gasPrice\': web3.toWei(\'50\', \'gwei\'),\n                \'nonce\': self.web3.eth.get_transaction_count(account_address),\n            })\n\n            signed_txn = self.web3.eth.account.sign_transaction(txn, private_key)\n            txn_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)\n\n            tx_receipt = self.web3.eth.wait_for_transaction_receipt(txn_hash)\n            logging.info(f"Transaction status: {tx_receipt[\'status\']}")\n\n            logging.info(f\'Transaction hash: {self.web3.to_hex(txn_hash)}\')\n            return self.web3.to_hex(txn_hash)\n        else:\n            return None\n\n\n@dataclass()\nclass HybridModelInference:\n    web3: Web3 = None\n    model_address: str = None\n\n    def create_web3(self, rpc: str):\n        if self.web3 is None:\n            if rpc != "":\n                self.web3 = Web3(Web3.HTTPProvider(rpc))\n            else:\n                # Default:\n                self.web3 = Web3(Web3.HTTPProvider(RPC_URL[ETH_CHAIN_ID]))\n            self.web3.middleware_onion.inject(geth_poa_middleware, layer=0)\n\n    def get_model_address(self, model_address: str):\n        if self.model_address is None or self.model_address == "":\n            self.model_address = model_address\n            if self.model_address == "":\n                raise Exception("No model")\n\n    def create_inference_model(self, private_key: str, model_address: str,\n                               system_prompt: str, prompt: str,\n                               rpc: str):\n        logging.info(f"Creating inference model...")\n        if private_key == "" or private_key is None:\n            raise Exception("Private key missing")\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            logging.info(f"Private key {private_key}")\n            self.get_model_address(model_address)\n            account = self.web3.eth.account.from_key(private_key)\n            account_address = Web3.to_checksum_address(account.address)\n            logging.info(f"address: {account_address}")\n\n            req = LLMInferRequest()\n            req.messages = [LLMInferMessage(content=prompt, role="user"),\n                            LLMInferMessage(content=system_prompt, role="system")]\n            json_request = json.dumps(asdict(req))\n            hybrid_model_contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.model_address),\n                                                           abi=HYBRID_MODEL_ABI)\n\n            func = hybrid_model_contract.functions.infer(json_request.encode("utf-8"), True)\n            txn = func.build_transaction({\n                \'from\': account_address,\n                # \'gas\': 200000,\n                # \'gasPrice\': web3.toWei(\'50\', \'gwei\'),\n                \'nonce\': self.web3.eth.get_transaction_count(account_address),\n            })\n\n            signed_txn = self.web3.eth.account.sign_transaction(txn, private_key)\n            try:\n                txn_hash = self.web3.eth.send_raw_transaction(signed_txn.rawTransaction)\n\n                tx_receipt = self.web3.eth.wait_for_transaction_receipt(txn_hash)\n                logging.info(f"Transaction status: {tx_receipt[\'status\']}")\n\n                logging.info(f\'Transaction hash: {self.web3.to_hex(txn_hash)}\')\n                return self.web3.to_hex(txn_hash)\n            except Exception as e:\n                raise e\n\n\n@dataclass()\nclass InferenceProcessing:\n    web3: Web3 = None\n    workerhub_address: str = None\n\n    def create_web3(self, rpc: str):\n        if self.web3 is None:\n            if rpc != "":\n                self.web3 = Web3(Web3.HTTPProvider(rpc))\n            else:\n                # Default:\n                self.web3 = Web3(Web3.HTTPProvider(RPC_URL[ETH_CHAIN_ID]))\n            self.web3.middleware_onion.inject(geth_poa_middleware, layer=0)\n\n    def get_workerhub_address(self, worker_hub_address: str):\n        if self.workerhub_address is None or self.workerhub_address == "":\n            self.workerhub_address = worker_hub_address\n            if self.workerhub_address == "":\n                raise Exception(f"missing worker hub address")\n\n    def get_assignments_by_inference(self, worker_hub_address: str, inference_id: int, rpc: str):\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            self.get_workerhub_address(worker_hub_address)\n            worker_hub_contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.workerhub_address),\n                                                         abi=WORKER_HUB_ABI)\n            try:\n                assignments_info = worker_hub_contract.functions.getAssignmentsByInference(inference_id).call()\n                for assignment in assignments_info:\n                    assignment_info = worker_hub_contract.functions.getAssignmentInfo(assignment).call()\n                    logging.info(f\'Assignments info: {assignment_info}\')\n                    output = assignment_info[7]\n                    if len(output) != 0:\n                        result = self.process_output_to_infer_response(output)\n                        if result is not None:\n                            return result\n                        else:\n                            continue\n                    else:\n                        continue\n                raise Exception(f\'Could not get result\')\n            except Exception as e:\n                raise e\n        else:\n            raise Exception(\'Web3 not connected\')\n\n    def get_inference_by_inference_id(self, worker_hub_address: str, inference_id: int, rpc: str):\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            self.get_workerhub_address(worker_hub_address)\n            contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.workerhub_address),\n                                              abi=PROMPT_SCHEDULER_ABI)\n            try:\n                inference_info = contract.functions.getInferenceInfo(inference_id).call()\n                output = inference_info[10]\n                if len(output) != 0:\n                    result = self.process_output_to_infer_response(output)\n                    if result is not None:\n                        return result\n                else:\n                    raise Exception(f\'Could not get result\')\n            except Exception as e:\n                raise e\n        raise Exception("Could not get inference info")\n\n    def process_output(self, out: bytes):\n        json_string = out.decode(\'utf-8\')\n        temp = json.loads(json_string)\n        try:\n            result = InferenceResponse(**temp)\n            return result\n        except:\n            return None\n\n    def process_output_to_infer_response(self, output: bytes):\n        infer_reponse = self.process_output(output)\n        if infer_reponse is None:\n            return None\n        if infer_reponse.storage == "lighthouse-filecoint" or "ipfs://" in infer_reponse.result_uri:\n            light_house = infer_reponse.result_uri.replace(IPFS, LIGHTHOUSE_IPFS)\n            light_house_reponse = requests.get(light_house)\n            if light_house_reponse.status_code == 200:\n                return light_house_reponse.text\n            else:\n                return None\n        else:\n            if infer_reponse.data != "":\n                decoded = base64.b64decode(infer_reponse.data)\n                decoded_string = decoded.decode(\'utf-8\')\n                return decoded_string\n            return None\n\n    def get_infer_id(self, worker_hub_address: str, tx_hash_hex: str, rpc: str):\n        self.create_web3(rpc)\n        if self.web3.is_connected():\n            logging.info(f\'Get infer Id from tx {tx_hash_hex}\')\n            tx_receipt = self.web3.eth.get_transaction_receipt(HexStr(tx_hash_hex))\n            self.get_workerhub_address(worker_hub_address)\n            if tx_receipt is None:\n                logging.error("Transaction receipt not found.")\n            else:\n                # Access logs from the transaction receipt\n                logs = tx_receipt[\'logs\']\n                if len(logs) > 0:\n                    contract = self.web3.eth.contract(address=Web3.to_checksum_address(self.workerhub_address),\n                                                      abi=WORKER_HUB_ABI)\n                    for log in logs:\n                        try:\n                            event_data = contract.events.NewInference().process_log(log)\n                            # logging.info(f"Parsed Event Data: {event_data}")\n                            if event_data.args is not None and event_data.args.inferenceId is not None:\n                                return event_data.args.inferenceId\n                        except Exception as e:\n                            logging.error(e)\n\n                    raise Exception("No Infer Id")\n\n        else:\n            raise Exception("not connected")\n')
    import logging
    import argparse
    from dotenv import load_dotenv
    
    from uniswap_ai import uni_swap_ai
    
    load_dotenv(".env")
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    if __name__ == "__main__":
        parser = argparse.ArgumentParser(description="UniSwap AI agent.")
    
        subparsers = parser.add_subparsers(dest='command', required=True)
    
        model_infer = subparsers.add_parser('model-infer', help='Infer to model contract')
        model_infer.add_argument('system_prompt', type=str, help='system prompt')
        model_infer.add_argument('prompt', type=str, help='user prompt')
        model_infer.add_argument('--pk', type=str, help='private key', required=False)
        model_infer.add_argument('--model_address', type=str, help='model address', required=False)
        model_infer.add_argument('--worker_hub_address', type=str, help='worker hub address', required=False)
        model_infer.add_argument('--chain_id', type=str, help='chain id', required=False)
    
        agent_infer = subparsers.add_parser('agent-infer', help='Infer to agent contract')
        agent_infer.add_argument('prompt', type=str, help='user prompt')
        agent_infer.add_argument('--pk', type=str, help='private key', required=False)
        agent_infer.add_argument('--agent_address', type=str, help='agent address', required=False)
        agent_infer.add_argument('--chain_id', type=str, help='chain id', required=False)
    
        # Parse arguments
        args = parser.parse_args()
    
        # Execute main logic
        uni_swap_ai(args)
    