// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: proto/script_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScriptService_ExecuteRPC_FullMethodName = "/script.ScriptService/ExecuteRPC"
)

// ScriptServiceClient is the client API for ScriptService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScriptServiceClient interface {
	ExecuteRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (ScriptService_ExecuteRPCClient, error)
}

type scriptServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScriptServiceClient(cc grpc.ClientConnInterface) ScriptServiceClient {
	return &scriptServiceClient{cc}
}

func (c *scriptServiceClient) ExecuteRPC(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (ScriptService_ExecuteRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &ScriptService_ServiceDesc.Streams[0], ScriptService_ExecuteRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &scriptServiceExecuteRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ScriptService_ExecuteRPCClient interface {
	Recv() (*RPCResponse, error)
	grpc.ClientStream
}

type scriptServiceExecuteRPCClient struct {
	grpc.ClientStream
}

func (x *scriptServiceExecuteRPCClient) Recv() (*RPCResponse, error) {
	m := new(RPCResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScriptServiceServer is the server API for ScriptService service.
// All implementations must embed UnimplementedScriptServiceServer
// for forward compatibility
type ScriptServiceServer interface {
	ExecuteRPC(*RPCRequest, ScriptService_ExecuteRPCServer) error
	mustEmbedUnimplementedScriptServiceServer()
}

// UnimplementedScriptServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScriptServiceServer struct {
}

func (UnimplementedScriptServiceServer) ExecuteRPC(*RPCRequest, ScriptService_ExecuteRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteRPC not implemented")
}
func (UnimplementedScriptServiceServer) mustEmbedUnimplementedScriptServiceServer() {}

// UnsafeScriptServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScriptServiceServer will
// result in compilation errors.
type UnsafeScriptServiceServer interface {
	mustEmbedUnimplementedScriptServiceServer()
}

func RegisterScriptServiceServer(s grpc.ServiceRegistrar, srv ScriptServiceServer) {
	s.RegisterService(&ScriptService_ServiceDesc, srv)
}

func _ScriptService_ExecuteRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RPCRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ScriptServiceServer).ExecuteRPC(m, &scriptServiceExecuteRPCServer{stream})
}

type ScriptService_ExecuteRPCServer interface {
	Send(*RPCResponse) error
	grpc.ServerStream
}

type scriptServiceExecuteRPCServer struct {
	grpc.ServerStream
}

func (x *scriptServiceExecuteRPCServer) Send(m *RPCResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ScriptService_ServiceDesc is the grpc.ServiceDesc for ScriptService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScriptService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "script.ScriptService",
	HandlerType: (*ScriptServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteRPC",
			Handler:       _ScriptService_ExecuteRPC_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/script_service.proto",
}
