// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package vibetokenfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// VibeTokenFactoryMetaData contains all meta data concerning the VibeTokenFactory contract.
var VibeTokenFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"T\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionNftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ImplementationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionNftId\",\"type\":\"uint256\"}],\"name\":\"TokenDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deployedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPositionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapQuoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"}],\"name\":\"quoteExactBaseForVibeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutVibeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"quoteExactETHForVibeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutVibeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountVibeToken\",\"type\":\"uint256\"}],\"name\":\"quoteExactVibeTokenForBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutBase\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountVibeToken\",\"type\":\"uint256\"}],\"name\":\"quoteExactVibeTokenForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountVibeTokenMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactBaseForVibeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutVibeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountVibeTokenMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForVibeToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutVibeToken\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountVibeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBaseMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactVibeTokenForBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutBase\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VibeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountVibeToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMinimum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactVibeTokenForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutETH\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMetadata\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"positionNftId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPositionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapQuoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608080604052346100165761350d908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80631871a22d146101b75780632a0da56a146101b25780633408e470146101ad5780634db4a352146101a8578063575f00d7146101a35780635c60da1b1461019e57806361309596146101995780636fecdf2414610194578063704b6c021461018f578063715018a61461018a578063735de9f7146101855780638da5cb5b146101805780639274a2ab1461017b5780639324f0e014610176578063a480ca7914610171578063ac9650d81461016c578063b0422bec14610167578063beb1ad6414610162578063c55dae631461015d578063d784d42614610158578063e5047b3014610153578063f1a25fb01461014e578063f2fde38b14610149578063f851a44014610144578063f8c8765e1461013f5763fe3cc33a1461013a57600080fd5b61156c565b61145a565b611431565b61139e565b6111db565b6111b2565b611145565b61111c565b6110a5565b610fea565b610ee8565b610e0b565b610b2f565b6108cc565b6108a3565b61087a565b610819565b6107ac565b610744565b610710565b6106e7565b610572565b610549565b61052e565b61031b565b610233565b9181601f840112156101e9578235916001600160401b0383116101e957602083818601950101116101e957565b600080fd5b6001600160a01b038116036101e957565b6064359061020c826101ee565b565b8060020b036101e957565b6084359061020c8261020e565b60a4359061020c8261020e565b346101e9576101003660031901126101e9576001600160401b036024358181116101e9576102659036906004016101bc565b91906044358281116101e95761027f9036906004016101bc565b93909161028a6101ff565b610292610219565b61029a610226565b9160e4359687116101e9576102e3976102ba6102c99836906004016101bc565b97909660c43596600435611dbb565b6040516001600160a01b0390911681529081906020820190565b0390f35b60a09060031901126101e9576004356102ff816101ee565b906024359060443590606435610314816101ee565b9060843590565b610324366102e7565b919390916001600160a01b038083161561050a5783161561050a5742116104d35782156104b65760985460009460209261044d929091906001600160a01b0316956103718130338a6131f1565b609b546103899082906001600160a01b031689613427565b6103ed6103ba60016103ad8660018060a01b0316600052609e602052604060002090565b015460a01c62ffffff1690565b6103e16103c561194b565b6001600160a01b038b168152956001600160a01b031686890152565b62ffffff166040850152565b6001600160a01b0386166060840152608083015260a082015260c08101869052609b5461043090610424906001600160a01b031681565b6001600160a01b031690565b906040519687809481936304e45aaf60e01b835260048301612cdc565b03925af19081156104b1576102e39360009261047f575b5061046f919261316f565b6040519081529081906020820190565b61046f92506104a49060203d81116104aa575b61049c818361192a565b8101906123cc565b91610464565b503d610492565b6123c0565b60405162461bcd60e51b8152806104cf60048201612c35565b0390fd5b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964446561646c696e6560881b6044820152606490fd5b60405162461bcd60e51b8152806104cf60048201611bf1565b60009103126101e957565b346101e95760003660031901126101e9576020604051468152f35b346101e95760003660031901126101e957609a546040516001600160a01b039091168152602090f35b346101e9576040806003193601126101e957600435610590816101ee565b6024359081156106cf576001600160a01b038116156106b7576098546000939260809261065e9261062591906001600160a01b0316926106156105ea60016103ad8560018060a01b0316600052609e602052604060002090565b926106056105f661196a565b6001600160a01b039097168752565b6001600160a01b03166020860152565b8387015262ffffff166060830152565b808301859052609a5461064290610424906001600160a01b031681565b908451958680948193636352813560e11b835260048301612c96565b03925af19081156104b1576102e392600092610684575b50519081529081906020820190565b6106a691925060803d81116106b0575b61069e818361192a565b810190612c5d565b5050509038610675565b503d610694565b825162461bcd60e51b8152806104cf60048201611bf1565b825162461bcd60e51b8152806104cf60048201612c35565b346101e95760003660031901126101e9576097546040516001600160a01b039091168152602090f35b346101e95760203660031901126101e957600435600052609d602052602060018060a01b0360406000205416604051908152f35b346101e95760203660031901126101e9576080600435610763816101ee565b60018060a01b03809116600052609e60205260406000209062ffffff818354169260026001820154910154926040519485528116602085015260a01c1660408301526060820152f35b346101e95760203660031901126101e9576004356107c9816101ee565b6107d1611840565b6001600160a01b0316801561050a57609c80546001600160a01b031916821790557f8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c600080a2005b346101e95760008060031936011261087757610833611840565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346101e95760003660031901126101e957609b546040516001600160a01b039091168152602090f35b346101e95760003660031901126101e9576033546040516001600160a01b039091168152602090f35b346101e9576040806003193601126101e9576004908135906108ed826101ee565b6024358015610b18576001600160a01b03831615610b0157609b5484919060209061092290610424906001600160a01b031681565b84516312a9293f60e21b815296879182905afa9485156104b157600095610ad1575b506098546001600160a01b03169061095d6105f661196a565b6001600160a01b038216602087015285840152610bb86060860152608094600086820152610998610424610424609a5460018060a01b031690565b928685518095816000816109b9636352813560e11b98898352888301612c96565b03925af19384156104b157610a68968895610a3692600091610ab1575b50610a266109fb60016103ad8560018060a01b0316600052609e602052604060002090565b92610a16610a0761196a565b6001600160a01b039099168952565b6001600160a01b03166020880152565b8588015262ffffff166060850152565b6000838501819052609a54610a5590610424906001600160a01b031681565b9286519788958694859384528301612c96565b03925af19182156104b1576102e393600093610a8f575b5050519081529081906020820190565b610aa6929350803d106106b05761069e818361192a565b505050903880610a7f565b610ac89150873d89116106b05761069e818361192a565b505050386109d6565b610af391955060203d8111610afa575b610aeb818361192a565b8101906123e6565b9338610944565b503d610ae1565b815162461bcd60e51b8152806104cf818701611bf1565b815162461bcd60e51b8152806104cf818701612c35565b610b38366102e7565b92919242116104d35734158015610e03575b8015610df9575b6104b6576001600160a01b038481161561050a5781161561050a57609b54610b8390610424906001600160a01b031681565b916040928351956312a9293f60e21b87526020968781600481865afa9081156104b157600091610ddc575b506098546001600160a01b031693610bd6610bc761194b565b6001600160a01b039093168352565b6001600160a01b038516828a0152610bb8828801523060608301526080820152600060a0820152600060c082015287865180948180610c236304e45aaf60e01b9687835260048301612cdc565b039134905af19283156104b157600093610dbd575b50609b54610c5090610424906001600160a01b031681565b96873b156101e9576000809860048951809b8193630910874560e11b83525af19384156104b157610d3f988a95610da4575b50609b54610c9b9082906001600160a01b031688613427565b610cf2610cbf60016103ad8760018060a01b0316600052609e602052604060002090565b610ce7610cca61194b565b6001600160a01b038a168152965b6001600160a01b031687890152565b62ffffff16858a0152565b6001600160a01b0387166060850152608084015260a0830152600060c0830152609b54610d2990610424906001600160a01b031681565b9060008751809981958294835260048301612cdc565b03925af19384156104b1576102e395600095610d79575b505090610d6681610d6b9361316f565b6130fe565b519081529081906020820190565b8392955092610d9b610d669285610d6b96903d106104aa5761049c818361192a565b95929350610d56565b80610db1610db7926118f7565b80610523565b38610c82565b610dd5919350883d8a116104aa5761049c818361192a565b9138610c38565b610df39150883d8a11610afa57610aeb818361192a565b38610bae565b5081341415610b51565b508115610b4a565b346101e95760203660031901126101e9576040610e32600435610e2d816101ee565b61293a565b82519182526020820152f35b60005b838110610e515750506000910152565b8181015183820152602001610e41565b90602091610e7a81518092818552858086019101610e3e565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610eba5750505050505090565b9091929394958480610ed8600193603f198682030187528a51610e61565b9801930193019194939290610eaa565b60203660031901126101e957600480356001600160401b03918282116101e957366023830112156101e957818101359283116101e957602490818301928236918660051b0101116101e957610f3c846119df565b9360005b818110610f5557604051806102e38882610e86565b600080610f63838589611a69565b60409391610f75855180938193611aaf565b0390305af490610f83611ad8565b91829015610fb257505090610fad91610f9c8289611b7a565b52610fa78188611b7a565b50611a3f565b610f40565b8683879260448251106101e957826104cf9385610fd59401518301019101611b08565b925162461bcd60e51b81529283928301611b69565b610ff3366102e7565b9390919342116104d35782156104b6576001600160a01b038181161561050a5782161561050a5761044d60209160009561102f863033856131f1565b609b546110479087906001600160a01b031684613427565b6098546001600160a01b0316956103ed61107860016103ad8660018060a01b0316600052609e602052604060002090565b61109261108361194b565b6001600160a01b039096168652565b6001600160a01b038916858801526103e1565b346101e9576040806003193601126101e9576004356110c3816101ee565b6024356001600160a01b038216156106b75780156106cf576098546000939260809261065e9261062591906001600160a01b0316906106156105ea60016103ad8760018060a01b0316600052609e602052604060002090565b346101e95760003660031901126101e9576098546040516001600160a01b039091168152602090f35b346101e95760203660031901126101e957600435611162816101ee565b61116a611840565b6001600160a01b0316801561050a57609780546001600160a01b031916821790557fab64f92ab780ecbf4f3866f57cee465ff36c89450dcce20237ca7a8d81fb7d13600080a2005b346101e95760003660031901126101e9576099546040516001600160a01b039091168152602090f35b346101e9576040806003193601126101e95760048035916111fb836101ee565b6024356001600160a01b0384161561138757801561137057609b5483919060209061123090610424906001600160a01b031681565b84516312a9293f60e21b815295869182905afa9384156104b157600094611350575b506098546112b0906001600160a01b03169161128560016103ad8960018060a01b0316600052609e602052604060002090565b90611291610a0761196a565b6001600160a01b03841660208901528786015262ffffff166060870152565b6080946000868201526112d0610424610424609a5460018060a01b031690565b928685518095816000816112f1636352813560e11b98898352888301612c96565b03925af180156104b157610a6896889560009261132a575b50611319906106056105f661196a565b83860152610bb86060840152610a36565b61131991925061134690873d89116106b05761069e818361192a565b5050509190611309565b61136991945060203d8111610afa57610aeb818361192a565b9238611252565b815162461bcd60e51b8152806104cf818601612c35565b815162461bcd60e51b8152806104cf818601611bf1565b346101e95760203660031901126101e9576004356113bb816101ee565b6113c3611840565b6001600160a01b038116156113dd576113db90611898565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346101e95760003660031901126101e957609c546040516001600160a01b039091168152602090f35b346101e95760803660031901126101e957600435611477816101ee565b6114e0602435611486816101ee565b604435611492816101ee565b6064359161149f836101ee565b600054946114c460ff8760081c16158097819861155e575b811561153e575b50611b8e565b856114d7600160ff196000541617600055565b61152557611c1a565b6114e657005b6114f661ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61153961010061ff00196000541617600055565b611c1a565b303b15915081611550575b50386114be565b6001915060ff161438611549565b600160ff82161091506114b7565b611575366102e7565b91936001600160a01b039390929091908484161561050a578482161561050a5742116104d35781156104b657609b80546115b990610424906001600160a01b031681565b94604094855180976312a9293f60e21b825281600460209a8b935afa9081156104b157600091611823575b506098546001600160a01b0316956115fe813033866131f1565b84546116159082906001600160a01b031685613427565b61165d61163960016103ad8660018060a01b0316600052609e602052604060002090565b61164461108361194b565b6001600160a01b038916858c015262ffffff16848a0152565b3060608401526080830152600060a0830181905260c0830152835461168c90610424906001600160a01b031681565b918888518094816000816116ae6304e45aaf60e01b9788835260048301612cdc565b03925af19081156104b157611746948a94600093611801575b508654600091906116e39085906001600160a01b03168c613427565b87546001600160a01b03169361170c6116fa61194b565b6001600160a01b038d16815296610cd8565b610bb8868d01526001600160a01b038516606087015260808601528c60a08601528160c08601528a51809781968295835260048301612cdc565b0393165af19586156104b1576000966117d6575b50505461177190610424906001600160a01b031681565b803b156101e957835163125012df60e21b815260048101969096526001600160a01b03821660248701526000908690604490829084905af19182156104b1576102e395610d6b936117c3575b5061316f565b80610db16117d0926118f7565b386117bd565b6117719296506117f9610424928261042493903d106104aa5761049c818361192a565b96925061175a565b600091935061181c90863d88116104aa5761049c818361192a565b92906116c7565b61183a9150883d8a11610afa57610aeb818361192a565b386115e4565b6033546001600160a01b0316330361185457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161190a57604052565b6118e1565b60a081019081106001600160401b0382111761190a57604052565b90601f801991011681019081106001600160401b0382111761190a57604052565b6040519060e082018281106001600160401b0382111761190a57604052565b6040519060a082018281106001600160401b0382111761190a57604052565b6040519061016082018281106001600160401b0382111761190a57604052565b60405190608082018281106001600160401b0382111761190a57604052565b6001600160401b03811161190a5760051b60200190565b906119e9826119c8565b6119f6604051918261192a565b8281528092611a07601f19916119c8565b019060005b828110611a1857505050565b806060602080938501015201611a0c565b634e487b7160e01b600052601160045260246000fd5b6000198114611a4e5760010190565b611a29565b634e487b7160e01b600052603260045260246000fd5b9190811015611aaa5760051b81013590601e19813603018212156101e95701908135916001600160401b0383116101e95760200182360381136101e9579190565b611a53565b908092918237016000815290565b6001600160401b03811161190a57601f01601f191660200190565b3d15611b03573d90611ae982611abd565b91611af7604051938461192a565b82523d6000602084013e565b606090565b6020818303126101e9578051906001600160401b0382116101e9570181601f820112156101e9578051611b3a81611abd565b92611b48604051948561192a565b818452602082840101116101e957611b669160208085019101610e3e565b90565b906020611b66928181520190610e61565b8051821015611aaa5760209160051b010190565b15611b9557565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60609060208152600e60208201526d496e76616c69644164647265737360901b60408201520190565b90929192611c3860ff60005460081c16611c3381611d24565b611d24565b611c4133611898565b611c5660ff60005460081c16611c3381611d24565b60016065556001600160a01b0382811615908115611d19575b8115611d0e575b8115611d03575b5061050a57609880546001600160a01b0319166001600160a01b03841617905561020c93611ce391611cc69060018060a01b03166001600160601b0360a01b6099541617609955565b60018060a01b03166001600160601b0360a01b609a541617609a55565b609b80546001600160a01b0319166001600160a01b0384161790556132ff565b905083161538611c7d565b858116159150611c76565b828116159150611c6f565b15611d2b57565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b929192611d9082611abd565b91611d9e604051938461192a565b8294818452818301116101e9578281602093846000960137010152565b979493959996989192611dd6611dde92611de6953691611d84565b963691611d84565b953691611d84565b6000868152609d60205260409020546001600160a01b039391908416612361578142116104d3578383161561050a5784511561232e578551156122f957611e3291888a8589898c612e34565b6097546001600160a01b03166040805160208082018981529294939092611e7292611e69818089015b03601f19810183528261192a565b51902090612438565b98848a1698893b156101e957611ea5978a9786519889809263266c45bb60e11b82528160009d8e9687936004840161239b565b03925af19182156104b1578a97611ec2936122e6575b508b612d68565b87516370a0823160e01b81523060048201529299919892949392918690869060249082905afa998a156104b1578e8c96879c6122bb575b506099548892611f7e929091611f1a918f916001600160a01b031690613427565b609954611f3b90611f3590610424906001600160a01b031681565b916124f6565b8b516309f56ab160e11b81526001600160a01b03808a16600483015280891660248301526127106044830152909116606482015297889283919082906084820190565b03925af19889156104b1578b9a8b8f97819c61227b575b50926120146120e197959361200361201d9460809b9997611fc361042461042460995460018060a01b031690565b9a8a891681036122745782985b8a160361226c5750965b611ff4611fe5611989565b6001600160a01b03909a168a52565b6001600160a01b0316888d0152565b612710878e015260020b6060870152565b60020b84880152565b60a0830190815260c0830191825260e083018b815261010084018c815230610120860190815260001961014087019081528c51634418b22b60e11b815287516001600160a01b039081166004830152602089015181166024830152604089015162ffffff1660448301526060890151600290810b606484015260809099015190980b6084820152945160a4860152945160c4850152915160e48401525161010483015251909216610124830152516101448201529788928391908290610164820190565b03925af19485156104b1577f035044c956f0f85240e40898163f0636d588d72de5fd08d79a9168d6267451739695612227575b50612221929161214d856121ca9361213c61212d6119a9565b6001600160a01b039095168552565b6001600160a01b0390911690830152565b61271083820152606081018681526001600160a01b038b81166000908152609e6020908152604091829020855181549085166001600160a01b031990911617815590850151600182018054939096015162ffffff60a01b60a09190911b166001600160b81b03199093169316929092171790925551600290910155565b612201886121e288600052609d602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b516001600160a01b03909216825260208201929092529081906040820190565b0390a390565b6121ca9195509161214d85612256612221969560803d8111612265575b61224e818361192a565b81019061240f565b50505097935050509192612114565b503d612244565b905096611fda565b8198611fd0565b6080989694919c506120e197959361200361201d946122a9612014948e803d10610afa57610aeb818361192a565b9f9497999b5094505093959750611f95565b611f7e919c5091611f1a6122dc8a94853d87116104aa5761049c818361192a565b9d92505091611ef9565b80610db16122f3926118f7565b38611ebb565b60405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a5914de5b589bdb609a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201526a496e76616c69644e616d6560a81b6044820152606490fd5b60405162461bcd60e51b8152602060048201526012602482015271546f6b656e416c726561647945786973747360701b6044820152606490fd5b90916123b2611b6693604084526040840190610e61565b916020818403910152610e61565b6040513d6000823e3d90fd5b908160209103126101e9575190565b519061020c826101ee565b908160209103126101e95751611b66816101ee565b51906001600160801b03821682036101e957565b91908260809103126101e95781519161242a602082016123fb565b916060604083015192015190565b6e5af43d82803e903d91602b57fd5bf390763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c161760005260781b17602052603760096000f5906001600160a01b0382161561248e57565b60405162461bcd60e51b815260206004820152601760248201527f455243313136373a2063726561746532206661696c65640000000000000000006044820152606490fd5b80156124e0576000190490565b634e487b7160e01b600052601260045260246000fd5b60020b60008112156128605780600003905b620d89e8821161284e57600182161561283c576001600160881b036ffffcb933bd6fad37aa2d162d1a5940015b169160028116612820575b60048116612804575b600881166127e8575b601081166127cc575b602081166127b0575b60408116612794575b608090818116612779575b610100811661275e575b6102008116612743575b6104008116612728575b610800811661270d575b61100081166126f2575b61200081166126d7575b61400081166126bc575b61800081166126a1575b620100008116612686575b62020000811661266c575b620400008116612652575b6208000016612637575b50600012612629575b63ffffffff8116612621576000905b60201c60ff91909116016001600160a01b031690565b60019061260b565b612632906124d3565b6125fc565b6b048a170391f7dc42444e8fa26000929302901c91906125f3565b6d2216e584f5fa1ea926041bedfe98909302811c926125e9565b926e5d6af8dedb81196699c329225ee60402811c926125de565b926f09aa508b5b7a84e1c677de54f3e99bc902811c926125d3565b926f31be135f97d08fd981231505542fcfa602811c926125c8565b926f70d869a156d2a1b890bb3df62baf32f702811c926125be565b926fa9f746462d870fdf8a65dc1f90e061e502811c926125b4565b926fd097f3bdfd2022b8845ad8f792aa582502811c926125aa565b926fe7159475a2c29b7443b29c7fa6e889d902811c926125a0565b926ff3392b0822b70005940c7a398e4b70f302811c92612596565b926ff987a7253ac413176f2b074cf7815e5402811c9261258c565b926ffcbe86c7900a88aedcffc83b479aa3a402811c92612582565b926ffe5dee046a99a2a811c461f1969c305302811c92612578565b916fff2ea16466c96a3843ec78b326b528610260801c9161256d565b916fff973b41fa98c081472e6896dfb254c00260801c91612564565b916fffcb9843d60f6159c9db58835c9266440260801c9161255b565b916fffe5caca7e10e4e61c3624eaa0941cd00260801c91612552565b916ffff2e50f5f656932ef12357cf3c7fdcc0260801c91612549565b916ffff97272373d413259a46990580e213a0260801c91612540565b6001600160881b03600160801b612535565b6040516315e4079d60e11b8152600490fd5b80612508565b91908260409103126101e9576020825192015190565b519062ffffff821682036101e957565b519061020c8261020e565b9190826101809103126101e95781516001600160601b03811681036101e957916128c3602082016123db565b916128d0604083016123db565b916128dd606082016123db565b916128ea6080830161287c565b916128f760a0820161288c565b9161290460c0830161288c565b9161291160e082016123fb565b916101008201519161012081015191611b6661016061293361014085016123fb565b93016123fb565b6001600160a01b0381169190821561050a576001600160a01b03166000908152609e602052604090209060028201548015612bd657609954612a08949061298b90610424906001600160a01b031681565b6129936119a9565b838152306020820152906040826129b3828095016001600160801b039052565b6001600160801b0360608201818152835163fc6f786560e01b81528351600482015260208401516001600160a01b03166024820152604090930151821660448401525116606482015297889081906084820190565b0381600080955af19586156104b15781978297612ba1575b5087158781612b98575b50612b8d57609954612a4690610424906001600160a01b031681565b835163133f757160e31b8152600481018790529290610180908190859060249082905afa9485156104b1577fa9aef66785858ba9f82e784db3e0dac4c23fb56b320d2cef3d4a0230d4c15e24958b958b938592612b44575b5050612b1c90612b3f9495612b10612abf612ab88a612c1f565b600a900490565b91612b16612ae0612ad2612ab88a612c1f565b92546001600160a01b031690565b99612aec858c836132b3565b612af7838c886132b3565b6033546001600160a01b0316948590612b10908e612c12565b916132b3565b86612c12565b5193849384604091949392606082019560018060a01b0316825260208201520152565b0390a3565b612b3f9550612b1c92509081612b6e92903d10612b86575b612b66818361192a565b810190612897565b50505050505050509792509050959181969550612a9e565b503d612b5c565b509550859450505050565b90501538612a2a565b909650612bc5919750823d8411612bcf575b612bbd818361192a565b810190612866565b9690969538612a20565b503d612bb3565b60405162461bcd60e51b8152602060048201526014602482015273125b9d985b1a59141bdcda5d1a5bdb93999d125960621b6044820152606490fd5b91908203918211611a4e57565b908160021b9180830460041490151715611a4e57565b60609060208152600d60208201526c125b9d985b1a59105b5bdd5b9d609a1b60408201520190565b91908260809103126101e9578151916020810151612c7a816101ee565b91604082015163ffffffff811681036101e95760609092015190565b919091608060a08201938160018060a01b03918281511685528260208201511660208601526040810151604086015262ffffff6060820151166060860152015116910152565b91909160c060e08201938160018060a01b039182815116855282602082015116602086015262ffffff60408201511660408601528260608201511660608601526080810151608086015260a081015160a0860152015116910152565b60020b627fffff198114611a4e5760000390565b60020b6000190190627fffff198212627fffff831317611a4e57565b6001600160a01b038082169492939190851561050a576098541694851561050a57851115612d9f57939290612d9c82612d4c565b92565b9290612db490612dae90612d38565b91612d38565b60018160020b01627fffff198112627fffff821317611a4e5792565b959998979490926101009794612e0b91612e199460018060a01b038097168a5260208a015260408901526101208060608a0152880190610e61565b908682036080880152610e61565b971660a084015260020b60c083015260020b60e08201520152565b609c546001600160a01b0390811698909796909590949193929091891561050a57612eaf97612eaa96612e7894611e5b93604051978896602088019a46308d612dd0565b5190207f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c52603c60002090565b612eef565b1603612eb757565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c69645369676e617475726560801b6044820152606490fd5b611b6691612efc91613044565b919091612f24565b60051115612f0e57565b634e487b7160e01b600052602160045260246000fd5b612f2d81612f04565b80612f355750565b612f3e81612f04565b60018103612f8b5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b612f9481612f04565b60028103612fe15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b80612fed600392612f04565b14612ff457565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b9060418151146000146130725761306e916020820151906060604084015193015160001a9061307c565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116130f25791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156104b15781516001600160a01b038116156130ec579190565b50600190565b50505050600090600390565b479081613109575050565b60405160208101908082106001600160401b0383111761190a576000938493848094938194604052525af161313c611ad8565b501561314457565b60405162461bcd60e51b815260206004820152600360248201526253544560e81b6044820152606490fd5b6040516370a0823160e01b815230600482015290916020826024816001600160a01b0387165afa9182156104b1576000926131b9575b50816131b057505050565b61020c926132b3565b6131d291925060203d81116104aa5761049c818361192a565b90386131a5565b908160209103126101e9575180151581036101e95790565b909183156132ad57600080949381946040519160208301946323b872dd60e01b865260018060a01b03809216602485015216604483015260648201526064815261323a8161190f565b51925af1613246611ad8565b8161327e575b501561325457565b60405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606490fd5b8051801592508215613293575b50503861324c565b6132a692506020809183010191016131d9565b388061328b565b50505050565b91909181156132fa5760405163a9059cbb60e01b602082019081526001600160a01b03909416602482015260448101929092526000928392839061323a8160648101611e5b565b505050565b604051636eb1769f60e11b81523060048201526001600160a01b0383166024820152602092908381806044810103816001600160a01b0387165afa9081156104b15760009161340a575b5060001911156132fa5760405163095ea7b360e01b8482019081526001600160a01b03909216602482015260001960448201526000928392909183906133928160648101611e5b565b51925af19061339f611ad8565b826133d8575b5050156133ae57565b60405162461bcd60e51b815260206004820152600260248201526120a360f11b6044820152606490fd5b80919250519182159283156133f2575b50505038806133a5565b61340293508201810191016131d9565b3880806133e8565b6134219150843d86116104aa5761049c818361192a565b38613349565b604051636eb1769f60e11b81523060048201526001600160a01b0383166024820152602093919291908481806044810103816001600160a01b0388165afa9081156104b1576000916134ba575b5010156132fa5760405163095ea7b360e01b8482019081526001600160a01b03909216602482015260001960448201526000928392909183906133928160648101611e5b565b6134d19150853d87116104aa5761049c818361192a565b3861347456fea264697066735822122003fe67604d8ccab25857ab5ae0cec4f03596bb98406136066ef8f98bd91ebbd564736f6c63430008130033",
}

// VibeTokenFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use VibeTokenFactoryMetaData.ABI instead.
var VibeTokenFactoryABI = VibeTokenFactoryMetaData.ABI

// VibeTokenFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use VibeTokenFactoryMetaData.Bin instead.
var VibeTokenFactoryBin = VibeTokenFactoryMetaData.Bin

// DeployVibeTokenFactory deploys a new Ethereum contract, binding an instance of VibeTokenFactory to it.
func DeployVibeTokenFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *VibeTokenFactory, error) {
	parsed, err := VibeTokenFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(VibeTokenFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &VibeTokenFactory{VibeTokenFactoryCaller: VibeTokenFactoryCaller{contract: contract}, VibeTokenFactoryTransactor: VibeTokenFactoryTransactor{contract: contract}, VibeTokenFactoryFilterer: VibeTokenFactoryFilterer{contract: contract}}, nil
}

// VibeTokenFactory is an auto generated Go binding around an Ethereum contract.
type VibeTokenFactory struct {
	VibeTokenFactoryCaller     // Read-only binding to the contract
	VibeTokenFactoryTransactor // Write-only binding to the contract
	VibeTokenFactoryFilterer   // Log filterer for contract events
}

// VibeTokenFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type VibeTokenFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VibeTokenFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type VibeTokenFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VibeTokenFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type VibeTokenFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// VibeTokenFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type VibeTokenFactorySession struct {
	Contract     *VibeTokenFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// VibeTokenFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type VibeTokenFactoryCallerSession struct {
	Contract *VibeTokenFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// VibeTokenFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type VibeTokenFactoryTransactorSession struct {
	Contract     *VibeTokenFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// VibeTokenFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type VibeTokenFactoryRaw struct {
	Contract *VibeTokenFactory // Generic contract binding to access the raw methods on
}

// VibeTokenFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type VibeTokenFactoryCallerRaw struct {
	Contract *VibeTokenFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// VibeTokenFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type VibeTokenFactoryTransactorRaw struct {
	Contract *VibeTokenFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewVibeTokenFactory creates a new instance of VibeTokenFactory, bound to a specific deployed contract.
func NewVibeTokenFactory(address common.Address, backend bind.ContractBackend) (*VibeTokenFactory, error) {
	contract, err := bindVibeTokenFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactory{VibeTokenFactoryCaller: VibeTokenFactoryCaller{contract: contract}, VibeTokenFactoryTransactor: VibeTokenFactoryTransactor{contract: contract}, VibeTokenFactoryFilterer: VibeTokenFactoryFilterer{contract: contract}}, nil
}

// NewVibeTokenFactoryCaller creates a new read-only instance of VibeTokenFactory, bound to a specific deployed contract.
func NewVibeTokenFactoryCaller(address common.Address, caller bind.ContractCaller) (*VibeTokenFactoryCaller, error) {
	contract, err := bindVibeTokenFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryCaller{contract: contract}, nil
}

// NewVibeTokenFactoryTransactor creates a new write-only instance of VibeTokenFactory, bound to a specific deployed contract.
func NewVibeTokenFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*VibeTokenFactoryTransactor, error) {
	contract, err := bindVibeTokenFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryTransactor{contract: contract}, nil
}

// NewVibeTokenFactoryFilterer creates a new log filterer instance of VibeTokenFactory, bound to a specific deployed contract.
func NewVibeTokenFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*VibeTokenFactoryFilterer, error) {
	contract, err := bindVibeTokenFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryFilterer{contract: contract}, nil
}

// bindVibeTokenFactory binds a generic wrapper to an already deployed contract.
func bindVibeTokenFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := VibeTokenFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VibeTokenFactory *VibeTokenFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VibeTokenFactory.Contract.VibeTokenFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VibeTokenFactory *VibeTokenFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.VibeTokenFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VibeTokenFactory *VibeTokenFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.VibeTokenFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_VibeTokenFactory *VibeTokenFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _VibeTokenFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_VibeTokenFactory *VibeTokenFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_VibeTokenFactory *VibeTokenFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.contract.Transact(opts, method, params...)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "admin")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) Admin() (common.Address, error) {
	return _VibeTokenFactory.Contract.Admin(&_VibeTokenFactory.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) Admin() (common.Address, error) {
	return _VibeTokenFactory.Contract.Admin(&_VibeTokenFactory.CallOpts)
}

// BaseToken is a free data retrieval call binding the contract method 0xc55dae63.
//
// Solidity: function baseToken() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) BaseToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "baseToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BaseToken is a free data retrieval call binding the contract method 0xc55dae63.
//
// Solidity: function baseToken() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) BaseToken() (common.Address, error) {
	return _VibeTokenFactory.Contract.BaseToken(&_VibeTokenFactory.CallOpts)
}

// BaseToken is a free data retrieval call binding the contract method 0xc55dae63.
//
// Solidity: function baseToken() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) BaseToken() (common.Address, error) {
	return _VibeTokenFactory.Contract.BaseToken(&_VibeTokenFactory.CallOpts)
}

// DeployedTokens is a free data retrieval call binding the contract method 0x61309596.
//
// Solidity: function deployedTokens(bytes32 ) view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) DeployedTokens(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "deployedTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// DeployedTokens is a free data retrieval call binding the contract method 0x61309596.
//
// Solidity: function deployedTokens(bytes32 ) view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) DeployedTokens(arg0 [32]byte) (common.Address, error) {
	return _VibeTokenFactory.Contract.DeployedTokens(&_VibeTokenFactory.CallOpts, arg0)
}

// DeployedTokens is a free data retrieval call binding the contract method 0x61309596.
//
// Solidity: function deployedTokens(bytes32 ) view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) DeployedTokens(arg0 [32]byte) (common.Address, error) {
	return _VibeTokenFactory.Contract.DeployedTokens(&_VibeTokenFactory.CallOpts, arg0)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_VibeTokenFactory *VibeTokenFactoryCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_VibeTokenFactory *VibeTokenFactorySession) GetChainId() (*big.Int, error) {
	return _VibeTokenFactory.Contract.GetChainId(&_VibeTokenFactory.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) GetChainId() (*big.Int, error) {
	return _VibeTokenFactory.Contract.GetChainId(&_VibeTokenFactory.CallOpts)
}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) Implementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "implementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) Implementation() (common.Address, error) {
	return _VibeTokenFactory.Contract.Implementation(&_VibeTokenFactory.CallOpts)
}

// Implementation is a free data retrieval call binding the contract method 0x5c60da1b.
//
// Solidity: function implementation() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) Implementation() (common.Address, error) {
	return _VibeTokenFactory.Contract.Implementation(&_VibeTokenFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) Owner() (common.Address, error) {
	return _VibeTokenFactory.Contract.Owner(&_VibeTokenFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) Owner() (common.Address, error) {
	return _VibeTokenFactory.Contract.Owner(&_VibeTokenFactory.CallOpts)
}

// TokenMetadata is a free data retrieval call binding the contract method 0x6fecdf24.
//
// Solidity: function tokenMetadata(address ) view returns(address creator, address pool, uint24 fee, uint256 positionNftId)
func (_VibeTokenFactory *VibeTokenFactoryCaller) TokenMetadata(opts *bind.CallOpts, arg0 common.Address) (struct {
	Creator       common.Address
	Pool          common.Address
	Fee           *big.Int
	PositionNftId *big.Int
}, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "tokenMetadata", arg0)

	outstruct := new(struct {
		Creator       common.Address
		Pool          common.Address
		Fee           *big.Int
		PositionNftId *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Creator = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Pool = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.Fee = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.PositionNftId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// TokenMetadata is a free data retrieval call binding the contract method 0x6fecdf24.
//
// Solidity: function tokenMetadata(address ) view returns(address creator, address pool, uint24 fee, uint256 positionNftId)
func (_VibeTokenFactory *VibeTokenFactorySession) TokenMetadata(arg0 common.Address) (struct {
	Creator       common.Address
	Pool          common.Address
	Fee           *big.Int
	PositionNftId *big.Int
}, error) {
	return _VibeTokenFactory.Contract.TokenMetadata(&_VibeTokenFactory.CallOpts, arg0)
}

// TokenMetadata is a free data retrieval call binding the contract method 0x6fecdf24.
//
// Solidity: function tokenMetadata(address ) view returns(address creator, address pool, uint24 fee, uint256 positionNftId)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) TokenMetadata(arg0 common.Address) (struct {
	Creator       common.Address
	Pool          common.Address
	Fee           *big.Int
	PositionNftId *big.Int
}, error) {
	return _VibeTokenFactory.Contract.TokenMetadata(&_VibeTokenFactory.CallOpts, arg0)
}

// UniswapPositionManager is a free data retrieval call binding the contract method 0xe5047b30.
//
// Solidity: function uniswapPositionManager() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) UniswapPositionManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "uniswapPositionManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniswapPositionManager is a free data retrieval call binding the contract method 0xe5047b30.
//
// Solidity: function uniswapPositionManager() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) UniswapPositionManager() (common.Address, error) {
	return _VibeTokenFactory.Contract.UniswapPositionManager(&_VibeTokenFactory.CallOpts)
}

// UniswapPositionManager is a free data retrieval call binding the contract method 0xe5047b30.
//
// Solidity: function uniswapPositionManager() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) UniswapPositionManager() (common.Address, error) {
	return _VibeTokenFactory.Contract.UniswapPositionManager(&_VibeTokenFactory.CallOpts)
}

// UniswapQuoter is a free data retrieval call binding the contract method 0x4db4a352.
//
// Solidity: function uniswapQuoter() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) UniswapQuoter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "uniswapQuoter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniswapQuoter is a free data retrieval call binding the contract method 0x4db4a352.
//
// Solidity: function uniswapQuoter() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) UniswapQuoter() (common.Address, error) {
	return _VibeTokenFactory.Contract.UniswapQuoter(&_VibeTokenFactory.CallOpts)
}

// UniswapQuoter is a free data retrieval call binding the contract method 0x4db4a352.
//
// Solidity: function uniswapQuoter() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) UniswapQuoter() (common.Address, error) {
	return _VibeTokenFactory.Contract.UniswapQuoter(&_VibeTokenFactory.CallOpts)
}

// UniswapRouter is a free data retrieval call binding the contract method 0x735de9f7.
//
// Solidity: function uniswapRouter() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCaller) UniswapRouter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _VibeTokenFactory.contract.Call(opts, &out, "uniswapRouter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniswapRouter is a free data retrieval call binding the contract method 0x735de9f7.
//
// Solidity: function uniswapRouter() view returns(address)
func (_VibeTokenFactory *VibeTokenFactorySession) UniswapRouter() (common.Address, error) {
	return _VibeTokenFactory.Contract.UniswapRouter(&_VibeTokenFactory.CallOpts)
}

// UniswapRouter is a free data retrieval call binding the contract method 0x735de9f7.
//
// Solidity: function uniswapRouter() view returns(address)
func (_VibeTokenFactory *VibeTokenFactoryCallerSession) UniswapRouter() (common.Address, error) {
	return _VibeTokenFactory.Contract.UniswapRouter(&_VibeTokenFactory.CallOpts)
}

// CollectFees is a paid mutator transaction binding the contract method 0xa480ca79.
//
// Solidity: function collectFees(address token) returns(uint256 amount0, uint256 amount1)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) CollectFees(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "collectFees", token)
}

// CollectFees is a paid mutator transaction binding the contract method 0xa480ca79.
//
// Solidity: function collectFees(address token) returns(uint256 amount0, uint256 amount1)
func (_VibeTokenFactory *VibeTokenFactorySession) CollectFees(token common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.CollectFees(&_VibeTokenFactory.TransactOpts, token)
}

// CollectFees is a paid mutator transaction binding the contract method 0xa480ca79.
//
// Solidity: function collectFees(address token) returns(uint256 amount0, uint256 amount1)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) CollectFees(token common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.CollectFees(&_VibeTokenFactory.TransactOpts, token)
}

// CreateToken is a paid mutator transaction binding the contract method 0x1871a22d.
//
// Solidity: function createToken(bytes32 nonce, string name, string symbol, address creator, int24 tickLower, int24 tickUpper, uint256 deadline, bytes signature) returns(address token)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) CreateToken(opts *bind.TransactOpts, nonce [32]byte, name string, symbol string, creator common.Address, tickLower *big.Int, tickUpper *big.Int, deadline *big.Int, signature []byte) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "createToken", nonce, name, symbol, creator, tickLower, tickUpper, deadline, signature)
}

// CreateToken is a paid mutator transaction binding the contract method 0x1871a22d.
//
// Solidity: function createToken(bytes32 nonce, string name, string symbol, address creator, int24 tickLower, int24 tickUpper, uint256 deadline, bytes signature) returns(address token)
func (_VibeTokenFactory *VibeTokenFactorySession) CreateToken(nonce [32]byte, name string, symbol string, creator common.Address, tickLower *big.Int, tickUpper *big.Int, deadline *big.Int, signature []byte) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.CreateToken(&_VibeTokenFactory.TransactOpts, nonce, name, symbol, creator, tickLower, tickUpper, deadline, signature)
}

// CreateToken is a paid mutator transaction binding the contract method 0x1871a22d.
//
// Solidity: function createToken(bytes32 nonce, string name, string symbol, address creator, int24 tickLower, int24 tickUpper, uint256 deadline, bytes signature) returns(address token)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) CreateToken(nonce [32]byte, name string, symbol string, creator common.Address, tickLower *big.Int, tickUpper *big.Int, deadline *big.Int, signature []byte) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.CreateToken(&_VibeTokenFactory.TransactOpts, nonce, name, symbol, creator, tickLower, tickUpper, deadline, signature)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address _baseToken, address _uniswapPositionManager, address _uniswapQuoter, address _uniswapRouter) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactor) Initialize(opts *bind.TransactOpts, _baseToken common.Address, _uniswapPositionManager common.Address, _uniswapQuoter common.Address, _uniswapRouter common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "initialize", _baseToken, _uniswapPositionManager, _uniswapQuoter, _uniswapRouter)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address _baseToken, address _uniswapPositionManager, address _uniswapQuoter, address _uniswapRouter) returns()
func (_VibeTokenFactory *VibeTokenFactorySession) Initialize(_baseToken common.Address, _uniswapPositionManager common.Address, _uniswapQuoter common.Address, _uniswapRouter common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.Initialize(&_VibeTokenFactory.TransactOpts, _baseToken, _uniswapPositionManager, _uniswapQuoter, _uniswapRouter)
}

// Initialize is a paid mutator transaction binding the contract method 0xf8c8765e.
//
// Solidity: function initialize(address _baseToken, address _uniswapPositionManager, address _uniswapQuoter, address _uniswapRouter) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) Initialize(_baseToken common.Address, _uniswapPositionManager common.Address, _uniswapQuoter common.Address, _uniswapRouter common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.Initialize(&_VibeTokenFactory.TransactOpts, _baseToken, _uniswapPositionManager, _uniswapQuoter, _uniswapRouter)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_VibeTokenFactory *VibeTokenFactorySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.Multicall(&_VibeTokenFactory.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.Multicall(&_VibeTokenFactory.TransactOpts, data)
}

// QuoteExactBaseForVibeToken is a paid mutator transaction binding the contract method 0x575f00d7.
//
// Solidity: function quoteExactBaseForVibeToken(address VibeToken, uint256 amountBase) returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) QuoteExactBaseForVibeToken(opts *bind.TransactOpts, VibeToken common.Address, amountBase *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "quoteExactBaseForVibeToken", VibeToken, amountBase)
}

// QuoteExactBaseForVibeToken is a paid mutator transaction binding the contract method 0x575f00d7.
//
// Solidity: function quoteExactBaseForVibeToken(address VibeToken, uint256 amountBase) returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactorySession) QuoteExactBaseForVibeToken(VibeToken common.Address, amountBase *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactBaseForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountBase)
}

// QuoteExactBaseForVibeToken is a paid mutator transaction binding the contract method 0x575f00d7.
//
// Solidity: function quoteExactBaseForVibeToken(address VibeToken, uint256 amountBase) returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) QuoteExactBaseForVibeToken(VibeToken common.Address, amountBase *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactBaseForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountBase)
}

// QuoteExactETHForVibeToken is a paid mutator transaction binding the contract method 0x9274a2ab.
//
// Solidity: function quoteExactETHForVibeToken(address VibeToken, uint256 amountETH) returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) QuoteExactETHForVibeToken(opts *bind.TransactOpts, VibeToken common.Address, amountETH *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "quoteExactETHForVibeToken", VibeToken, amountETH)
}

// QuoteExactETHForVibeToken is a paid mutator transaction binding the contract method 0x9274a2ab.
//
// Solidity: function quoteExactETHForVibeToken(address VibeToken, uint256 amountETH) returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactorySession) QuoteExactETHForVibeToken(VibeToken common.Address, amountETH *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactETHForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountETH)
}

// QuoteExactETHForVibeToken is a paid mutator transaction binding the contract method 0x9274a2ab.
//
// Solidity: function quoteExactETHForVibeToken(address VibeToken, uint256 amountETH) returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) QuoteExactETHForVibeToken(VibeToken common.Address, amountETH *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactETHForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountETH)
}

// QuoteExactVibeTokenForBase is a paid mutator transaction binding the contract method 0xbeb1ad64.
//
// Solidity: function quoteExactVibeTokenForBase(address VibeToken, uint256 amountVibeToken) returns(uint256 amountOutBase)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) QuoteExactVibeTokenForBase(opts *bind.TransactOpts, VibeToken common.Address, amountVibeToken *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "quoteExactVibeTokenForBase", VibeToken, amountVibeToken)
}

// QuoteExactVibeTokenForBase is a paid mutator transaction binding the contract method 0xbeb1ad64.
//
// Solidity: function quoteExactVibeTokenForBase(address VibeToken, uint256 amountVibeToken) returns(uint256 amountOutBase)
func (_VibeTokenFactory *VibeTokenFactorySession) QuoteExactVibeTokenForBase(VibeToken common.Address, amountVibeToken *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactVibeTokenForBase(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken)
}

// QuoteExactVibeTokenForBase is a paid mutator transaction binding the contract method 0xbeb1ad64.
//
// Solidity: function quoteExactVibeTokenForBase(address VibeToken, uint256 amountVibeToken) returns(uint256 amountOutBase)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) QuoteExactVibeTokenForBase(VibeToken common.Address, amountVibeToken *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactVibeTokenForBase(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken)
}

// QuoteExactVibeTokenForETH is a paid mutator transaction binding the contract method 0xf1a25fb0.
//
// Solidity: function quoteExactVibeTokenForETH(address VibeToken, uint256 amountVibeToken) returns(uint256 amountOutETH)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) QuoteExactVibeTokenForETH(opts *bind.TransactOpts, VibeToken common.Address, amountVibeToken *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "quoteExactVibeTokenForETH", VibeToken, amountVibeToken)
}

// QuoteExactVibeTokenForETH is a paid mutator transaction binding the contract method 0xf1a25fb0.
//
// Solidity: function quoteExactVibeTokenForETH(address VibeToken, uint256 amountVibeToken) returns(uint256 amountOutETH)
func (_VibeTokenFactory *VibeTokenFactorySession) QuoteExactVibeTokenForETH(VibeToken common.Address, amountVibeToken *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactVibeTokenForETH(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken)
}

// QuoteExactVibeTokenForETH is a paid mutator transaction binding the contract method 0xf1a25fb0.
//
// Solidity: function quoteExactVibeTokenForETH(address VibeToken, uint256 amountVibeToken) returns(uint256 amountOutETH)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) QuoteExactVibeTokenForETH(VibeToken common.Address, amountVibeToken *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.QuoteExactVibeTokenForETH(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_VibeTokenFactory *VibeTokenFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.RenounceOwnership(&_VibeTokenFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.RenounceOwnership(&_VibeTokenFactory.TransactOpts)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address _admin) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactor) SetAdmin(opts *bind.TransactOpts, _admin common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "setAdmin", _admin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address _admin) returns()
func (_VibeTokenFactory *VibeTokenFactorySession) SetAdmin(_admin common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SetAdmin(&_VibeTokenFactory.TransactOpts, _admin)
}

// SetAdmin is a paid mutator transaction binding the contract method 0x704b6c02.
//
// Solidity: function setAdmin(address _admin) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) SetAdmin(_admin common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SetAdmin(&_VibeTokenFactory.TransactOpts, _admin)
}

// SetImplementation is a paid mutator transaction binding the contract method 0xd784d426.
//
// Solidity: function setImplementation(address _implementation) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactor) SetImplementation(opts *bind.TransactOpts, _implementation common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "setImplementation", _implementation)
}

// SetImplementation is a paid mutator transaction binding the contract method 0xd784d426.
//
// Solidity: function setImplementation(address _implementation) returns()
func (_VibeTokenFactory *VibeTokenFactorySession) SetImplementation(_implementation common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SetImplementation(&_VibeTokenFactory.TransactOpts, _implementation)
}

// SetImplementation is a paid mutator transaction binding the contract method 0xd784d426.
//
// Solidity: function setImplementation(address _implementation) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) SetImplementation(_implementation common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SetImplementation(&_VibeTokenFactory.TransactOpts, _implementation)
}

// SwapExactBaseForVibeToken is a paid mutator transaction binding the contract method 0x2a0da56a.
//
// Solidity: function swapExactBaseForVibeToken(address VibeToken, uint256 amountBase, uint256 amountVibeTokenMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) SwapExactBaseForVibeToken(opts *bind.TransactOpts, VibeToken common.Address, amountBase *big.Int, amountVibeTokenMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "swapExactBaseForVibeToken", VibeToken, amountBase, amountVibeTokenMinimum, recipient, deadline)
}

// SwapExactBaseForVibeToken is a paid mutator transaction binding the contract method 0x2a0da56a.
//
// Solidity: function swapExactBaseForVibeToken(address VibeToken, uint256 amountBase, uint256 amountVibeTokenMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactorySession) SwapExactBaseForVibeToken(VibeToken common.Address, amountBase *big.Int, amountVibeTokenMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactBaseForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountBase, amountVibeTokenMinimum, recipient, deadline)
}

// SwapExactBaseForVibeToken is a paid mutator transaction binding the contract method 0x2a0da56a.
//
// Solidity: function swapExactBaseForVibeToken(address VibeToken, uint256 amountBase, uint256 amountVibeTokenMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) SwapExactBaseForVibeToken(VibeToken common.Address, amountBase *big.Int, amountVibeTokenMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactBaseForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountBase, amountVibeTokenMinimum, recipient, deadline)
}

// SwapExactETHForVibeToken is a paid mutator transaction binding the contract method 0x9324f0e0.
//
// Solidity: function swapExactETHForVibeToken(address VibeToken, uint256 amountETH, uint256 amountVibeTokenMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) SwapExactETHForVibeToken(opts *bind.TransactOpts, VibeToken common.Address, amountETH *big.Int, amountVibeTokenMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "swapExactETHForVibeToken", VibeToken, amountETH, amountVibeTokenMinimum, recipient, deadline)
}

// SwapExactETHForVibeToken is a paid mutator transaction binding the contract method 0x9324f0e0.
//
// Solidity: function swapExactETHForVibeToken(address VibeToken, uint256 amountETH, uint256 amountVibeTokenMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactorySession) SwapExactETHForVibeToken(VibeToken common.Address, amountETH *big.Int, amountVibeTokenMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactETHForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountETH, amountVibeTokenMinimum, recipient, deadline)
}

// SwapExactETHForVibeToken is a paid mutator transaction binding the contract method 0x9324f0e0.
//
// Solidity: function swapExactETHForVibeToken(address VibeToken, uint256 amountETH, uint256 amountVibeTokenMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutVibeToken)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) SwapExactETHForVibeToken(VibeToken common.Address, amountETH *big.Int, amountVibeTokenMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactETHForVibeToken(&_VibeTokenFactory.TransactOpts, VibeToken, amountETH, amountVibeTokenMinimum, recipient, deadline)
}

// SwapExactVibeTokenForBase is a paid mutator transaction binding the contract method 0xb0422bec.
//
// Solidity: function swapExactVibeTokenForBase(address VibeToken, uint256 amountVibeToken, uint256 amountBaseMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutBase)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) SwapExactVibeTokenForBase(opts *bind.TransactOpts, VibeToken common.Address, amountVibeToken *big.Int, amountBaseMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "swapExactVibeTokenForBase", VibeToken, amountVibeToken, amountBaseMinimum, recipient, deadline)
}

// SwapExactVibeTokenForBase is a paid mutator transaction binding the contract method 0xb0422bec.
//
// Solidity: function swapExactVibeTokenForBase(address VibeToken, uint256 amountVibeToken, uint256 amountBaseMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutBase)
func (_VibeTokenFactory *VibeTokenFactorySession) SwapExactVibeTokenForBase(VibeToken common.Address, amountVibeToken *big.Int, amountBaseMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactVibeTokenForBase(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken, amountBaseMinimum, recipient, deadline)
}

// SwapExactVibeTokenForBase is a paid mutator transaction binding the contract method 0xb0422bec.
//
// Solidity: function swapExactVibeTokenForBase(address VibeToken, uint256 amountVibeToken, uint256 amountBaseMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutBase)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) SwapExactVibeTokenForBase(VibeToken common.Address, amountVibeToken *big.Int, amountBaseMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactVibeTokenForBase(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken, amountBaseMinimum, recipient, deadline)
}

// SwapExactVibeTokenForETH is a paid mutator transaction binding the contract method 0xfe3cc33a.
//
// Solidity: function swapExactVibeTokenForETH(address VibeToken, uint256 amountVibeToken, uint256 amountETHMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutETH)
func (_VibeTokenFactory *VibeTokenFactoryTransactor) SwapExactVibeTokenForETH(opts *bind.TransactOpts, VibeToken common.Address, amountVibeToken *big.Int, amountETHMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "swapExactVibeTokenForETH", VibeToken, amountVibeToken, amountETHMinimum, recipient, deadline)
}

// SwapExactVibeTokenForETH is a paid mutator transaction binding the contract method 0xfe3cc33a.
//
// Solidity: function swapExactVibeTokenForETH(address VibeToken, uint256 amountVibeToken, uint256 amountETHMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutETH)
func (_VibeTokenFactory *VibeTokenFactorySession) SwapExactVibeTokenForETH(VibeToken common.Address, amountVibeToken *big.Int, amountETHMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactVibeTokenForETH(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken, amountETHMinimum, recipient, deadline)
}

// SwapExactVibeTokenForETH is a paid mutator transaction binding the contract method 0xfe3cc33a.
//
// Solidity: function swapExactVibeTokenForETH(address VibeToken, uint256 amountVibeToken, uint256 amountETHMinimum, address recipient, uint256 deadline) payable returns(uint256 amountOutETH)
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) SwapExactVibeTokenForETH(VibeToken common.Address, amountVibeToken *big.Int, amountETHMinimum *big.Int, recipient common.Address, deadline *big.Int) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.SwapExactVibeTokenForETH(&_VibeTokenFactory.TransactOpts, VibeToken, amountVibeToken, amountETHMinimum, recipient, deadline)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_VibeTokenFactory *VibeTokenFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.TransferOwnership(&_VibeTokenFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_VibeTokenFactory *VibeTokenFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _VibeTokenFactory.Contract.TransferOwnership(&_VibeTokenFactory.TransactOpts, newOwner)
}

// VibeTokenFactoryAdminSetIterator is returned from FilterAdminSet and is used to iterate over the raw logs and unpacked data for AdminSet events raised by the VibeTokenFactory contract.
type VibeTokenFactoryAdminSetIterator struct {
	Event *VibeTokenFactoryAdminSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VibeTokenFactoryAdminSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VibeTokenFactoryAdminSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VibeTokenFactoryAdminSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VibeTokenFactoryAdminSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VibeTokenFactoryAdminSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VibeTokenFactoryAdminSet represents a AdminSet event raised by the VibeTokenFactory contract.
type VibeTokenFactoryAdminSet struct {
	Admin common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAdminSet is a free log retrieval operation binding the contract event 0x8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c.
//
// Solidity: event AdminSet(address indexed admin)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) FilterAdminSet(opts *bind.FilterOpts, admin []common.Address) (*VibeTokenFactoryAdminSetIterator, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.FilterLogs(opts, "AdminSet", adminRule)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryAdminSetIterator{contract: _VibeTokenFactory.contract, event: "AdminSet", logs: logs, sub: sub}, nil
}

// WatchAdminSet is a free log subscription operation binding the contract event 0x8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c.
//
// Solidity: event AdminSet(address indexed admin)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) WatchAdminSet(opts *bind.WatchOpts, sink chan<- *VibeTokenFactoryAdminSet, admin []common.Address) (event.Subscription, error) {

	var adminRule []interface{}
	for _, adminItem := range admin {
		adminRule = append(adminRule, adminItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.WatchLogs(opts, "AdminSet", adminRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VibeTokenFactoryAdminSet)
				if err := _VibeTokenFactory.contract.UnpackLog(event, "AdminSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminSet is a log parse operation binding the contract event 0x8fe72c3e0020beb3234e76ae6676fa576fbfcae600af1c4fea44784cf0db329c.
//
// Solidity: event AdminSet(address indexed admin)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) ParseAdminSet(log types.Log) (*VibeTokenFactoryAdminSet, error) {
	event := new(VibeTokenFactoryAdminSet)
	if err := _VibeTokenFactory.contract.UnpackLog(event, "AdminSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VibeTokenFactoryFeesCollectedIterator is returned from FilterFeesCollected and is used to iterate over the raw logs and unpacked data for FeesCollected events raised by the VibeTokenFactory contract.
type VibeTokenFactoryFeesCollectedIterator struct {
	Event *VibeTokenFactoryFeesCollected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VibeTokenFactoryFeesCollectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VibeTokenFactoryFeesCollected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VibeTokenFactoryFeesCollected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VibeTokenFactoryFeesCollectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VibeTokenFactoryFeesCollectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VibeTokenFactoryFeesCollected represents a FeesCollected event raised by the VibeTokenFactory contract.
type VibeTokenFactoryFeesCollected struct {
	Token         common.Address
	PositionNftId *big.Int
	Recipient     common.Address
	Amount0       *big.Int
	Amount1       *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterFeesCollected is a free log retrieval operation binding the contract event 0xa9aef66785858ba9f82e784db3e0dac4c23fb56b320d2cef3d4a0230d4c15e24.
//
// Solidity: event FeesCollected(address indexed token, uint256 indexed positionNftId, address recipient, uint256 amount0, uint256 amount1)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) FilterFeesCollected(opts *bind.FilterOpts, token []common.Address, positionNftId []*big.Int) (*VibeTokenFactoryFeesCollectedIterator, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var positionNftIdRule []interface{}
	for _, positionNftIdItem := range positionNftId {
		positionNftIdRule = append(positionNftIdRule, positionNftIdItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.FilterLogs(opts, "FeesCollected", tokenRule, positionNftIdRule)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryFeesCollectedIterator{contract: _VibeTokenFactory.contract, event: "FeesCollected", logs: logs, sub: sub}, nil
}

// WatchFeesCollected is a free log subscription operation binding the contract event 0xa9aef66785858ba9f82e784db3e0dac4c23fb56b320d2cef3d4a0230d4c15e24.
//
// Solidity: event FeesCollected(address indexed token, uint256 indexed positionNftId, address recipient, uint256 amount0, uint256 amount1)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) WatchFeesCollected(opts *bind.WatchOpts, sink chan<- *VibeTokenFactoryFeesCollected, token []common.Address, positionNftId []*big.Int) (event.Subscription, error) {

	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}
	var positionNftIdRule []interface{}
	for _, positionNftIdItem := range positionNftId {
		positionNftIdRule = append(positionNftIdRule, positionNftIdItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.WatchLogs(opts, "FeesCollected", tokenRule, positionNftIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VibeTokenFactoryFeesCollected)
				if err := _VibeTokenFactory.contract.UnpackLog(event, "FeesCollected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeesCollected is a log parse operation binding the contract event 0xa9aef66785858ba9f82e784db3e0dac4c23fb56b320d2cef3d4a0230d4c15e24.
//
// Solidity: event FeesCollected(address indexed token, uint256 indexed positionNftId, address recipient, uint256 amount0, uint256 amount1)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) ParseFeesCollected(log types.Log) (*VibeTokenFactoryFeesCollected, error) {
	event := new(VibeTokenFactoryFeesCollected)
	if err := _VibeTokenFactory.contract.UnpackLog(event, "FeesCollected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VibeTokenFactoryImplementationSetIterator is returned from FilterImplementationSet and is used to iterate over the raw logs and unpacked data for ImplementationSet events raised by the VibeTokenFactory contract.
type VibeTokenFactoryImplementationSetIterator struct {
	Event *VibeTokenFactoryImplementationSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VibeTokenFactoryImplementationSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VibeTokenFactoryImplementationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VibeTokenFactoryImplementationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VibeTokenFactoryImplementationSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VibeTokenFactoryImplementationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VibeTokenFactoryImplementationSet represents a ImplementationSet event raised by the VibeTokenFactory contract.
type VibeTokenFactoryImplementationSet struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterImplementationSet is a free log retrieval operation binding the contract event 0xab64f92ab780ecbf4f3866f57cee465ff36c89450dcce20237ca7a8d81fb7d13.
//
// Solidity: event ImplementationSet(address indexed implementation)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) FilterImplementationSet(opts *bind.FilterOpts, implementation []common.Address) (*VibeTokenFactoryImplementationSetIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.FilterLogs(opts, "ImplementationSet", implementationRule)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryImplementationSetIterator{contract: _VibeTokenFactory.contract, event: "ImplementationSet", logs: logs, sub: sub}, nil
}

// WatchImplementationSet is a free log subscription operation binding the contract event 0xab64f92ab780ecbf4f3866f57cee465ff36c89450dcce20237ca7a8d81fb7d13.
//
// Solidity: event ImplementationSet(address indexed implementation)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) WatchImplementationSet(opts *bind.WatchOpts, sink chan<- *VibeTokenFactoryImplementationSet, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.WatchLogs(opts, "ImplementationSet", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VibeTokenFactoryImplementationSet)
				if err := _VibeTokenFactory.contract.UnpackLog(event, "ImplementationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseImplementationSet is a log parse operation binding the contract event 0xab64f92ab780ecbf4f3866f57cee465ff36c89450dcce20237ca7a8d81fb7d13.
//
// Solidity: event ImplementationSet(address indexed implementation)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) ParseImplementationSet(log types.Log) (*VibeTokenFactoryImplementationSet, error) {
	event := new(VibeTokenFactoryImplementationSet)
	if err := _VibeTokenFactory.contract.UnpackLog(event, "ImplementationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VibeTokenFactoryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the VibeTokenFactory contract.
type VibeTokenFactoryInitializedIterator struct {
	Event *VibeTokenFactoryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VibeTokenFactoryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VibeTokenFactoryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VibeTokenFactoryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VibeTokenFactoryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VibeTokenFactoryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VibeTokenFactoryInitialized represents a Initialized event raised by the VibeTokenFactory contract.
type VibeTokenFactoryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) FilterInitialized(opts *bind.FilterOpts) (*VibeTokenFactoryInitializedIterator, error) {

	logs, sub, err := _VibeTokenFactory.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryInitializedIterator{contract: _VibeTokenFactory.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *VibeTokenFactoryInitialized) (event.Subscription, error) {

	logs, sub, err := _VibeTokenFactory.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VibeTokenFactoryInitialized)
				if err := _VibeTokenFactory.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) ParseInitialized(log types.Log) (*VibeTokenFactoryInitialized, error) {
	event := new(VibeTokenFactoryInitialized)
	if err := _VibeTokenFactory.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VibeTokenFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the VibeTokenFactory contract.
type VibeTokenFactoryOwnershipTransferredIterator struct {
	Event *VibeTokenFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VibeTokenFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VibeTokenFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VibeTokenFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VibeTokenFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VibeTokenFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VibeTokenFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the VibeTokenFactory contract.
type VibeTokenFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*VibeTokenFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryOwnershipTransferredIterator{contract: _VibeTokenFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *VibeTokenFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VibeTokenFactoryOwnershipTransferred)
				if err := _VibeTokenFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*VibeTokenFactoryOwnershipTransferred, error) {
	event := new(VibeTokenFactoryOwnershipTransferred)
	if err := _VibeTokenFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// VibeTokenFactoryTokenDeployedIterator is returned from FilterTokenDeployed and is used to iterate over the raw logs and unpacked data for TokenDeployed events raised by the VibeTokenFactory contract.
type VibeTokenFactoryTokenDeployedIterator struct {
	Event *VibeTokenFactoryTokenDeployed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *VibeTokenFactoryTokenDeployedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(VibeTokenFactoryTokenDeployed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(VibeTokenFactoryTokenDeployed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *VibeTokenFactoryTokenDeployedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *VibeTokenFactoryTokenDeployedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// VibeTokenFactoryTokenDeployed represents a TokenDeployed event raised by the VibeTokenFactory contract.
type VibeTokenFactoryTokenDeployed struct {
	Nonce         [32]byte
	Token         common.Address
	Pool          common.Address
	PositionNftId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterTokenDeployed is a free log retrieval operation binding the contract event 0x035044c956f0f85240e40898163f0636d588d72de5fd08d79a9168d626745173.
//
// Solidity: event TokenDeployed(bytes32 indexed nonce, address indexed token, address pool, uint256 positionNftId)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) FilterTokenDeployed(opts *bind.FilterOpts, nonce [][32]byte, token []common.Address) (*VibeTokenFactoryTokenDeployedIterator, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.FilterLogs(opts, "TokenDeployed", nonceRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return &VibeTokenFactoryTokenDeployedIterator{contract: _VibeTokenFactory.contract, event: "TokenDeployed", logs: logs, sub: sub}, nil
}

// WatchTokenDeployed is a free log subscription operation binding the contract event 0x035044c956f0f85240e40898163f0636d588d72de5fd08d79a9168d626745173.
//
// Solidity: event TokenDeployed(bytes32 indexed nonce, address indexed token, address pool, uint256 positionNftId)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) WatchTokenDeployed(opts *bind.WatchOpts, sink chan<- *VibeTokenFactoryTokenDeployed, nonce [][32]byte, token []common.Address) (event.Subscription, error) {

	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}
	var tokenRule []interface{}
	for _, tokenItem := range token {
		tokenRule = append(tokenRule, tokenItem)
	}

	logs, sub, err := _VibeTokenFactory.contract.WatchLogs(opts, "TokenDeployed", nonceRule, tokenRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(VibeTokenFactoryTokenDeployed)
				if err := _VibeTokenFactory.contract.UnpackLog(event, "TokenDeployed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenDeployed is a log parse operation binding the contract event 0x035044c956f0f85240e40898163f0636d588d72de5fd08d79a9168d626745173.
//
// Solidity: event TokenDeployed(bytes32 indexed nonce, address indexed token, address pool, uint256 positionNftId)
func (_VibeTokenFactory *VibeTokenFactoryFilterer) ParseTokenDeployed(log types.Log) (*VibeTokenFactoryTokenDeployed, error) {
	event := new(VibeTokenFactoryTokenDeployed)
	if err := _VibeTokenFactory.contract.UnpackLog(event, "TokenDeployed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
