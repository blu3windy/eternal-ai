// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20realworldagent

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ERC20VotesCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// IRealWorldAgentRequest is an auto generated low-level Go binding around an user-defined struct.
type IRealWorldAgentRequest struct {
	Uuid    [32]byte
	Creator common.Address
	Timeout uint32
	Status  uint8
	Data    []byte
	Result  []byte
}

// ERC20RealWorldAgentMetaData contains all meta data concerning the ERC20RealWorldAgent contract.
var ERC20RealWorldAgentMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"name_\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"symbol_\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"amount_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"recipient_\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"minFeeToUse_\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"timeout_\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"tokenFee_\",\"type\":\"address\",\"internalType\":\"contractIERC20\"},{\"name\":\"worker_\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"CLOCK_MODE\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"DOMAIN_SEPARATOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"act\",\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"executeData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"act\",\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signature\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"allowance\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"approve\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"balanceOf\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkpoints\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pos\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structERC20Votes.Checkpoint\",\"components\":[{\"name\":\"fromBlock\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"votes\",\"type\":\"uint224\",\"internalType\":\"uint224\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"clock\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint48\",\"internalType\":\"uint48\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decimals\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"decreaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegate\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegateBySig\",\"inputs\":[{\"name\":\"delegatee\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegates\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getActId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getHashToSign\",\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getMinFeeToUse\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastTotalSupply\",\"inputs\":[{\"name\":\"timepoint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPastVotes\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"timepoint\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRequest\",\"inputs\":[{\"name\":\"actId\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIRealWorldAgent.Request\",\"components\":[{\"name\":\"uuid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"creator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"timeout\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"status\",\"type\":\"uint8\",\"internalType\":\"enumIRealWorldAgent.RequestStatus\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"result\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getResultById\",\"inputs\":[{\"name\":\"uuid\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getVotes\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"increaseAllowance\",\"inputs\":[{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"name\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nonces\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"numCheckpoints\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"permit\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"deadline\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinFeeToUse\",\"inputs\":[{\"name\":\"minFeeToUse_\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setTimeout\",\"inputs\":[{\"name\":\"timeout_\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setTokenFee\",\"inputs\":[{\"name\":\"tokenFee_\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setWorker\",\"inputs\":[{\"name\":\"newWorker\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"submitSolution\",\"inputs\":[{\"name\":\"actId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"result\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbol\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"totalSupply\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transfer\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferFrom\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdrawFeeToken\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Approval\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"spender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegateChanged\",\"inputs\":[{\"name\":\"delegator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"fromDelegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"toDelegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DelegateVotesChanged\",\"inputs\":[{\"name\":\"delegate\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"previousBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"newBalance\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ExecutionRequested\",\"inputs\":[{\"name\":\"actId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"uuid\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"creator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SolutionSubmitted\",\"inputs\":[{\"name\":\"actId\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"processor\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"result\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Transfer\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WorkerUpdated\",\"inputs\":[{\"name\":\"oldWorker\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newWorker\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"DuplicateUuid\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InsufficientBalance\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAmount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidExternalDataLength\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidRequestStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidUuid\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]},{\"type\":\"error\",\"name\":\"Timeout\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"Unauthorized\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ZeroAddress\",\"inputs\":[]}]",
	Bin: "",
}

// ERC20RealWorldAgentABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20RealWorldAgentMetaData.ABI instead.
var ERC20RealWorldAgentABI = ERC20RealWorldAgentMetaData.ABI

// ERC20RealWorldAgentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20RealWorldAgentMetaData.Bin instead.
var ERC20RealWorldAgentBin = ERC20RealWorldAgentMetaData.Bin

// DeployERC20RealWorldAgent deploys a new Ethereum contract, binding an instance of ERC20RealWorldAgent to it.
func DeployERC20RealWorldAgent(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, amount_ *big.Int, recipient_ common.Address, minFeeToUse_ *big.Int, timeout_ uint32, tokenFee_ common.Address, worker_ common.Address) (common.Address, *types.Transaction, *ERC20RealWorldAgent, error) {
	parsed, err := ERC20RealWorldAgentMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20RealWorldAgentBin), backend, name_, symbol_, amount_, recipient_, minFeeToUse_, timeout_, tokenFee_, worker_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20RealWorldAgent{ERC20RealWorldAgentCaller: ERC20RealWorldAgentCaller{contract: contract}, ERC20RealWorldAgentTransactor: ERC20RealWorldAgentTransactor{contract: contract}, ERC20RealWorldAgentFilterer: ERC20RealWorldAgentFilterer{contract: contract}}, nil
}

// ERC20RealWorldAgent is an auto generated Go binding around an Ethereum contract.
type ERC20RealWorldAgent struct {
	ERC20RealWorldAgentCaller     // Read-only binding to the contract
	ERC20RealWorldAgentTransactor // Write-only binding to the contract
	ERC20RealWorldAgentFilterer   // Log filterer for contract events
}

// ERC20RealWorldAgentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20RealWorldAgentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RealWorldAgentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20RealWorldAgentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RealWorldAgentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20RealWorldAgentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20RealWorldAgentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20RealWorldAgentSession struct {
	Contract     *ERC20RealWorldAgent // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// ERC20RealWorldAgentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20RealWorldAgentCallerSession struct {
	Contract *ERC20RealWorldAgentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// ERC20RealWorldAgentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20RealWorldAgentTransactorSession struct {
	Contract     *ERC20RealWorldAgentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ERC20RealWorldAgentRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20RealWorldAgentRaw struct {
	Contract *ERC20RealWorldAgent // Generic contract binding to access the raw methods on
}

// ERC20RealWorldAgentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20RealWorldAgentCallerRaw struct {
	Contract *ERC20RealWorldAgentCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20RealWorldAgentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20RealWorldAgentTransactorRaw struct {
	Contract *ERC20RealWorldAgentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20RealWorldAgent creates a new instance of ERC20RealWorldAgent, bound to a specific deployed contract.
func NewERC20RealWorldAgent(address common.Address, backend bind.ContractBackend) (*ERC20RealWorldAgent, error) {
	contract, err := bindERC20RealWorldAgent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgent{ERC20RealWorldAgentCaller: ERC20RealWorldAgentCaller{contract: contract}, ERC20RealWorldAgentTransactor: ERC20RealWorldAgentTransactor{contract: contract}, ERC20RealWorldAgentFilterer: ERC20RealWorldAgentFilterer{contract: contract}}, nil
}

// NewERC20RealWorldAgentCaller creates a new read-only instance of ERC20RealWorldAgent, bound to a specific deployed contract.
func NewERC20RealWorldAgentCaller(address common.Address, caller bind.ContractCaller) (*ERC20RealWorldAgentCaller, error) {
	contract, err := bindERC20RealWorldAgent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentCaller{contract: contract}, nil
}

// NewERC20RealWorldAgentTransactor creates a new write-only instance of ERC20RealWorldAgent, bound to a specific deployed contract.
func NewERC20RealWorldAgentTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20RealWorldAgentTransactor, error) {
	contract, err := bindERC20RealWorldAgent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentTransactor{contract: contract}, nil
}

// NewERC20RealWorldAgentFilterer creates a new log filterer instance of ERC20RealWorldAgent, bound to a specific deployed contract.
func NewERC20RealWorldAgentFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20RealWorldAgentFilterer, error) {
	contract, err := bindERC20RealWorldAgent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentFilterer{contract: contract}, nil
}

// bindERC20RealWorldAgent binds a generic wrapper to an already deployed contract.
func bindERC20RealWorldAgent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20RealWorldAgentMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RealWorldAgent *ERC20RealWorldAgentRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RealWorldAgent.Contract.ERC20RealWorldAgentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RealWorldAgent *ERC20RealWorldAgentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.ERC20RealWorldAgentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RealWorldAgent *ERC20RealWorldAgentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.ERC20RealWorldAgentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20RealWorldAgent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) CLOCKMODE() (string, error) {
	return _ERC20RealWorldAgent.Contract.CLOCKMODE(&_ERC20RealWorldAgent.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) CLOCKMODE() (string, error) {
	return _ERC20RealWorldAgent.Contract.CLOCKMODE(&_ERC20RealWorldAgent.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ERC20RealWorldAgent.Contract.DOMAINSEPARATOR(&_ERC20RealWorldAgent.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ERC20RealWorldAgent.Contract.DOMAINSEPARATOR(&_ERC20RealWorldAgent.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.Allowance(&_ERC20RealWorldAgent.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.Allowance(&_ERC20RealWorldAgent.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.BalanceOf(&_ERC20RealWorldAgent.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.BalanceOf(&_ERC20RealWorldAgent.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesCheckpoint)).(*ERC20VotesCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _ERC20RealWorldAgent.Contract.Checkpoints(&_ERC20RealWorldAgent.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _ERC20RealWorldAgent.Contract.Checkpoints(&_ERC20RealWorldAgent.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Clock() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.Clock(&_ERC20RealWorldAgent.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Clock() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.Clock(&_ERC20RealWorldAgent.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Decimals() (uint8, error) {
	return _ERC20RealWorldAgent.Contract.Decimals(&_ERC20RealWorldAgent.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Decimals() (uint8, error) {
	return _ERC20RealWorldAgent.Contract.Decimals(&_ERC20RealWorldAgent.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Delegates(account common.Address) (common.Address, error) {
	return _ERC20RealWorldAgent.Contract.Delegates(&_ERC20RealWorldAgent.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _ERC20RealWorldAgent.Contract.Delegates(&_ERC20RealWorldAgent.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ERC20RealWorldAgent.Contract.Eip712Domain(&_ERC20RealWorldAgent.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ERC20RealWorldAgent.Contract.Eip712Domain(&_ERC20RealWorldAgent.CallOpts)
}

// GetActId is a free data retrieval call binding the contract method 0x1af09a2b.
//
// Solidity: function getActId() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetActId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getActId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetActId is a free data retrieval call binding the contract method 0x1af09a2b.
//
// Solidity: function getActId() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetActId() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetActId(&_ERC20RealWorldAgent.CallOpts)
}

// GetActId is a free data retrieval call binding the contract method 0x1af09a2b.
//
// Solidity: function getActId() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetActId() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetActId(&_ERC20RealWorldAgent.CallOpts)
}

// GetHashToSign is a free data retrieval call binding the contract method 0xe0839ca1.
//
// Solidity: function getHashToSign(bytes32 uuid, bytes data) view returns(bytes32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetHashToSign(opts *bind.CallOpts, uuid [32]byte, data []byte) ([32]byte, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getHashToSign", uuid, data)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetHashToSign is a free data retrieval call binding the contract method 0xe0839ca1.
//
// Solidity: function getHashToSign(bytes32 uuid, bytes data) view returns(bytes32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetHashToSign(uuid [32]byte, data []byte) ([32]byte, error) {
	return _ERC20RealWorldAgent.Contract.GetHashToSign(&_ERC20RealWorldAgent.CallOpts, uuid, data)
}

// GetHashToSign is a free data retrieval call binding the contract method 0xe0839ca1.
//
// Solidity: function getHashToSign(bytes32 uuid, bytes data) view returns(bytes32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetHashToSign(uuid [32]byte, data []byte) ([32]byte, error) {
	return _ERC20RealWorldAgent.Contract.GetHashToSign(&_ERC20RealWorldAgent.CallOpts, uuid, data)
}

// GetMinFeeToUse is a free data retrieval call binding the contract method 0x9aa474ed.
//
// Solidity: function getMinFeeToUse() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetMinFeeToUse(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getMinFeeToUse")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMinFeeToUse is a free data retrieval call binding the contract method 0x9aa474ed.
//
// Solidity: function getMinFeeToUse() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetMinFeeToUse() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetMinFeeToUse(&_ERC20RealWorldAgent.CallOpts)
}

// GetMinFeeToUse is a free data retrieval call binding the contract method 0x9aa474ed.
//
// Solidity: function getMinFeeToUse() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetMinFeeToUse() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetMinFeeToUse(&_ERC20RealWorldAgent.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetPastTotalSupply(&_ERC20RealWorldAgent.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetPastTotalSupply(&_ERC20RealWorldAgent.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetPastVotes(&_ERC20RealWorldAgent.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetPastVotes(&_ERC20RealWorldAgent.CallOpts, account, timepoint)
}

// GetRequest is a free data retrieval call binding the contract method 0xc58343ef.
//
// Solidity: function getRequest(uint256 actId) view returns((bytes32,address,uint32,uint8,bytes,bytes))
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetRequest(opts *bind.CallOpts, actId *big.Int) (IRealWorldAgentRequest, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getRequest", actId)

	if err != nil {
		return *new(IRealWorldAgentRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IRealWorldAgentRequest)).(*IRealWorldAgentRequest)

	return out0, err

}

// GetRequest is a free data retrieval call binding the contract method 0xc58343ef.
//
// Solidity: function getRequest(uint256 actId) view returns((bytes32,address,uint32,uint8,bytes,bytes))
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetRequest(actId *big.Int) (IRealWorldAgentRequest, error) {
	return _ERC20RealWorldAgent.Contract.GetRequest(&_ERC20RealWorldAgent.CallOpts, actId)
}

// GetRequest is a free data retrieval call binding the contract method 0xc58343ef.
//
// Solidity: function getRequest(uint256 actId) view returns((bytes32,address,uint32,uint8,bytes,bytes))
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetRequest(actId *big.Int) (IRealWorldAgentRequest, error) {
	return _ERC20RealWorldAgent.Contract.GetRequest(&_ERC20RealWorldAgent.CallOpts, actId)
}

// GetResultById is a free data retrieval call binding the contract method 0x365bec7f.
//
// Solidity: function getResultById(bytes32 uuid) view returns(bytes)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetResultById(opts *bind.CallOpts, uuid [32]byte) ([]byte, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getResultById", uuid)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetResultById is a free data retrieval call binding the contract method 0x365bec7f.
//
// Solidity: function getResultById(bytes32 uuid) view returns(bytes)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetResultById(uuid [32]byte) ([]byte, error) {
	return _ERC20RealWorldAgent.Contract.GetResultById(&_ERC20RealWorldAgent.CallOpts, uuid)
}

// GetResultById is a free data retrieval call binding the contract method 0x365bec7f.
//
// Solidity: function getResultById(bytes32 uuid) view returns(bytes)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetResultById(uuid [32]byte) ([]byte, error) {
	return _ERC20RealWorldAgent.Contract.GetResultById(&_ERC20RealWorldAgent.CallOpts, uuid)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) GetVotes(account common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetVotes(&_ERC20RealWorldAgent.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.GetVotes(&_ERC20RealWorldAgent.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Name() (string, error) {
	return _ERC20RealWorldAgent.Contract.Name(&_ERC20RealWorldAgent.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Name() (string, error) {
	return _ERC20RealWorldAgent.Contract.Name(&_ERC20RealWorldAgent.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Nonces(owner common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.Nonces(&_ERC20RealWorldAgent.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.Nonces(&_ERC20RealWorldAgent.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _ERC20RealWorldAgent.Contract.NumCheckpoints(&_ERC20RealWorldAgent.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _ERC20RealWorldAgent.Contract.NumCheckpoints(&_ERC20RealWorldAgent.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Owner() (common.Address, error) {
	return _ERC20RealWorldAgent.Contract.Owner(&_ERC20RealWorldAgent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Owner() (common.Address, error) {
	return _ERC20RealWorldAgent.Contract.Owner(&_ERC20RealWorldAgent.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Symbol() (string, error) {
	return _ERC20RealWorldAgent.Contract.Symbol(&_ERC20RealWorldAgent.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) Symbol() (string, error) {
	return _ERC20RealWorldAgent.Contract.Symbol(&_ERC20RealWorldAgent.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20RealWorldAgent.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) TotalSupply() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.TotalSupply(&_ERC20RealWorldAgent.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20RealWorldAgent.Contract.TotalSupply(&_ERC20RealWorldAgent.CallOpts)
}

// Act is a paid mutator transaction binding the contract method 0xd19834fc.
//
// Solidity: function act(bytes32 uuid, bytes executeData) returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) Act(opts *bind.TransactOpts, uuid [32]byte, executeData []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "act", uuid, executeData)
}

// Act is a paid mutator transaction binding the contract method 0xd19834fc.
//
// Solidity: function act(bytes32 uuid, bytes executeData) returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Act(uuid [32]byte, executeData []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Act(&_ERC20RealWorldAgent.TransactOpts, uuid, executeData)
}

// Act is a paid mutator transaction binding the contract method 0xd19834fc.
//
// Solidity: function act(bytes32 uuid, bytes executeData) returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) Act(uuid [32]byte, executeData []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Act(&_ERC20RealWorldAgent.TransactOpts, uuid, executeData)
}

// Act0 is a paid mutator transaction binding the contract method 0xfea5ef99.
//
// Solidity: function act(bytes32 uuid, bytes data, bytes signature) returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) Act0(opts *bind.TransactOpts, uuid [32]byte, data []byte, signature []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "act0", uuid, data, signature)
}

// Act0 is a paid mutator transaction binding the contract method 0xfea5ef99.
//
// Solidity: function act(bytes32 uuid, bytes data, bytes signature) returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Act0(uuid [32]byte, data []byte, signature []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Act0(&_ERC20RealWorldAgent.TransactOpts, uuid, data, signature)
}

// Act0 is a paid mutator transaction binding the contract method 0xfea5ef99.
//
// Solidity: function act(bytes32 uuid, bytes data, bytes signature) returns(uint256)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) Act0(uuid [32]byte, data []byte, signature []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Act0(&_ERC20RealWorldAgent.TransactOpts, uuid, data, signature)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Approve(&_ERC20RealWorldAgent.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Approve(&_ERC20RealWorldAgent.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.DecreaseAllowance(&_ERC20RealWorldAgent.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.DecreaseAllowance(&_ERC20RealWorldAgent.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Delegate(&_ERC20RealWorldAgent.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Delegate(&_ERC20RealWorldAgent.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.DelegateBySig(&_ERC20RealWorldAgent.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.DelegateBySig(&_ERC20RealWorldAgent.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.IncreaseAllowance(&_ERC20RealWorldAgent.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.IncreaseAllowance(&_ERC20RealWorldAgent.TransactOpts, spender, addedValue)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Permit(&_ERC20RealWorldAgent.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Permit(&_ERC20RealWorldAgent.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.RenounceOwnership(&_ERC20RealWorldAgent.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.RenounceOwnership(&_ERC20RealWorldAgent.TransactOpts)
}

// SetMinFeeToUse is a paid mutator transaction binding the contract method 0xaf5e3be0.
//
// Solidity: function setMinFeeToUse(uint256 minFeeToUse_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) SetMinFeeToUse(opts *bind.TransactOpts, minFeeToUse_ *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "setMinFeeToUse", minFeeToUse_)
}

// SetMinFeeToUse is a paid mutator transaction binding the contract method 0xaf5e3be0.
//
// Solidity: function setMinFeeToUse(uint256 minFeeToUse_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) SetMinFeeToUse(minFeeToUse_ *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetMinFeeToUse(&_ERC20RealWorldAgent.TransactOpts, minFeeToUse_)
}

// SetMinFeeToUse is a paid mutator transaction binding the contract method 0xaf5e3be0.
//
// Solidity: function setMinFeeToUse(uint256 minFeeToUse_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) SetMinFeeToUse(minFeeToUse_ *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetMinFeeToUse(&_ERC20RealWorldAgent.TransactOpts, minFeeToUse_)
}

// SetTimeout is a paid mutator transaction binding the contract method 0xdc80d104.
//
// Solidity: function setTimeout(uint32 timeout_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) SetTimeout(opts *bind.TransactOpts, timeout_ uint32) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "setTimeout", timeout_)
}

// SetTimeout is a paid mutator transaction binding the contract method 0xdc80d104.
//
// Solidity: function setTimeout(uint32 timeout_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) SetTimeout(timeout_ uint32) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetTimeout(&_ERC20RealWorldAgent.TransactOpts, timeout_)
}

// SetTimeout is a paid mutator transaction binding the contract method 0xdc80d104.
//
// Solidity: function setTimeout(uint32 timeout_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) SetTimeout(timeout_ uint32) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetTimeout(&_ERC20RealWorldAgent.TransactOpts, timeout_)
}

// SetTokenFee is a paid mutator transaction binding the contract method 0x241da1c0.
//
// Solidity: function setTokenFee(address tokenFee_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) SetTokenFee(opts *bind.TransactOpts, tokenFee_ common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "setTokenFee", tokenFee_)
}

// SetTokenFee is a paid mutator transaction binding the contract method 0x241da1c0.
//
// Solidity: function setTokenFee(address tokenFee_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) SetTokenFee(tokenFee_ common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetTokenFee(&_ERC20RealWorldAgent.TransactOpts, tokenFee_)
}

// SetTokenFee is a paid mutator transaction binding the contract method 0x241da1c0.
//
// Solidity: function setTokenFee(address tokenFee_) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) SetTokenFee(tokenFee_ common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetTokenFee(&_ERC20RealWorldAgent.TransactOpts, tokenFee_)
}

// SetWorker is a paid mutator transaction binding the contract method 0xc26f6d44.
//
// Solidity: function setWorker(address newWorker) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) SetWorker(opts *bind.TransactOpts, newWorker common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "setWorker", newWorker)
}

// SetWorker is a paid mutator transaction binding the contract method 0xc26f6d44.
//
// Solidity: function setWorker(address newWorker) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) SetWorker(newWorker common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetWorker(&_ERC20RealWorldAgent.TransactOpts, newWorker)
}

// SetWorker is a paid mutator transaction binding the contract method 0xc26f6d44.
//
// Solidity: function setWorker(address newWorker) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) SetWorker(newWorker common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SetWorker(&_ERC20RealWorldAgent.TransactOpts, newWorker)
}

// SubmitSolution is a paid mutator transaction binding the contract method 0xe84dee6b.
//
// Solidity: function submitSolution(uint256 actId, bytes result) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) SubmitSolution(opts *bind.TransactOpts, actId *big.Int, result []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "submitSolution", actId, result)
}

// SubmitSolution is a paid mutator transaction binding the contract method 0xe84dee6b.
//
// Solidity: function submitSolution(uint256 actId, bytes result) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) SubmitSolution(actId *big.Int, result []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SubmitSolution(&_ERC20RealWorldAgent.TransactOpts, actId, result)
}

// SubmitSolution is a paid mutator transaction binding the contract method 0xe84dee6b.
//
// Solidity: function submitSolution(uint256 actId, bytes result) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) SubmitSolution(actId *big.Int, result []byte) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.SubmitSolution(&_ERC20RealWorldAgent.TransactOpts, actId, result)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Transfer(&_ERC20RealWorldAgent.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.Transfer(&_ERC20RealWorldAgent.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.TransferFrom(&_ERC20RealWorldAgent.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.TransferFrom(&_ERC20RealWorldAgent.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.TransferOwnership(&_ERC20RealWorldAgent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.TransferOwnership(&_ERC20RealWorldAgent.TransactOpts, newOwner)
}

// WithdrawFeeToken is a paid mutator transaction binding the contract method 0xb2ef14e3.
//
// Solidity: function withdrawFeeToken(address to, uint256 amount) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactor) WithdrawFeeToken(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.contract.Transact(opts, "withdrawFeeToken", to, amount)
}

// WithdrawFeeToken is a paid mutator transaction binding the contract method 0xb2ef14e3.
//
// Solidity: function withdrawFeeToken(address to, uint256 amount) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentSession) WithdrawFeeToken(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.WithdrawFeeToken(&_ERC20RealWorldAgent.TransactOpts, to, amount)
}

// WithdrawFeeToken is a paid mutator transaction binding the contract method 0xb2ef14e3.
//
// Solidity: function withdrawFeeToken(address to, uint256 amount) returns()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentTransactorSession) WithdrawFeeToken(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20RealWorldAgent.Contract.WithdrawFeeToken(&_ERC20RealWorldAgent.TransactOpts, to, amount)
}

// ERC20RealWorldAgentApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentApprovalIterator struct {
	Event *ERC20RealWorldAgentApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentApproval represents a Approval event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20RealWorldAgentApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentApprovalIterator{contract: _ERC20RealWorldAgent.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentApproval)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseApproval(log types.Log) (*ERC20RealWorldAgentApproval, error) {
	event := new(ERC20RealWorldAgentApproval)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentDelegateChangedIterator struct {
	Event *ERC20RealWorldAgentDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentDelegateChanged represents a DelegateChanged event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*ERC20RealWorldAgentDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentDelegateChangedIterator{contract: _ERC20RealWorldAgent.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentDelegateChanged)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseDelegateChanged(log types.Log) (*ERC20RealWorldAgentDelegateChanged, error) {
	event := new(ERC20RealWorldAgentDelegateChanged)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentDelegateVotesChangedIterator struct {
	Event *ERC20RealWorldAgentDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentDelegateVotesChanged represents a DelegateVotesChanged event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*ERC20RealWorldAgentDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentDelegateVotesChangedIterator{contract: _ERC20RealWorldAgent.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentDelegateVotesChanged)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseDelegateVotesChanged(log types.Log) (*ERC20RealWorldAgentDelegateVotesChanged, error) {
	event := new(ERC20RealWorldAgentDelegateVotesChanged)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentEIP712DomainChangedIterator struct {
	Event *ERC20RealWorldAgentEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentEIP712DomainChanged represents a EIP712DomainChanged event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ERC20RealWorldAgentEIP712DomainChangedIterator, error) {

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentEIP712DomainChangedIterator{contract: _ERC20RealWorldAgent.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentEIP712DomainChanged)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseEIP712DomainChanged(log types.Log) (*ERC20RealWorldAgentEIP712DomainChanged, error) {
	event := new(ERC20RealWorldAgentEIP712DomainChanged)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentExecutionRequestedIterator is returned from FilterExecutionRequested and is used to iterate over the raw logs and unpacked data for ExecutionRequested events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentExecutionRequestedIterator struct {
	Event *ERC20RealWorldAgentExecutionRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentExecutionRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentExecutionRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentExecutionRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentExecutionRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentExecutionRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentExecutionRequested represents a ExecutionRequested event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentExecutionRequested struct {
	ActId   *big.Int
	Uuid    [32]byte
	Creator common.Address
	Data    []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterExecutionRequested is a free log retrieval operation binding the contract event 0x9096741026bdd638bcc5cb995f0f00b4574b81f120a23c4a7086347116bf58a1.
//
// Solidity: event ExecutionRequested(uint256 indexed actId, bytes32 indexed uuid, address indexed creator, bytes data)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterExecutionRequested(opts *bind.FilterOpts, actId []*big.Int, uuid [][32]byte, creator []common.Address) (*ERC20RealWorldAgentExecutionRequestedIterator, error) {

	var actIdRule []interface{}
	for _, actIdItem := range actId {
		actIdRule = append(actIdRule, actIdItem)
	}
	var uuidRule []interface{}
	for _, uuidItem := range uuid {
		uuidRule = append(uuidRule, uuidItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "ExecutionRequested", actIdRule, uuidRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentExecutionRequestedIterator{contract: _ERC20RealWorldAgent.contract, event: "ExecutionRequested", logs: logs, sub: sub}, nil
}

// WatchExecutionRequested is a free log subscription operation binding the contract event 0x9096741026bdd638bcc5cb995f0f00b4574b81f120a23c4a7086347116bf58a1.
//
// Solidity: event ExecutionRequested(uint256 indexed actId, bytes32 indexed uuid, address indexed creator, bytes data)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchExecutionRequested(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentExecutionRequested, actId []*big.Int, uuid [][32]byte, creator []common.Address) (event.Subscription, error) {

	var actIdRule []interface{}
	for _, actIdItem := range actId {
		actIdRule = append(actIdRule, actIdItem)
	}
	var uuidRule []interface{}
	for _, uuidItem := range uuid {
		uuidRule = append(uuidRule, uuidItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "ExecutionRequested", actIdRule, uuidRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentExecutionRequested)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "ExecutionRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionRequested is a log parse operation binding the contract event 0x9096741026bdd638bcc5cb995f0f00b4574b81f120a23c4a7086347116bf58a1.
//
// Solidity: event ExecutionRequested(uint256 indexed actId, bytes32 indexed uuid, address indexed creator, bytes data)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseExecutionRequested(log types.Log) (*ERC20RealWorldAgentExecutionRequested, error) {
	event := new(ERC20RealWorldAgentExecutionRequested)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "ExecutionRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentOwnershipTransferredIterator struct {
	Event *ERC20RealWorldAgentOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20RealWorldAgentOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentOwnershipTransferredIterator{contract: _ERC20RealWorldAgent.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentOwnershipTransferred)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20RealWorldAgentOwnershipTransferred, error) {
	event := new(ERC20RealWorldAgentOwnershipTransferred)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentSolutionSubmittedIterator is returned from FilterSolutionSubmitted and is used to iterate over the raw logs and unpacked data for SolutionSubmitted events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentSolutionSubmittedIterator struct {
	Event *ERC20RealWorldAgentSolutionSubmitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentSolutionSubmittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentSolutionSubmitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentSolutionSubmitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentSolutionSubmittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentSolutionSubmittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentSolutionSubmitted represents a SolutionSubmitted event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentSolutionSubmitted struct {
	ActId     *big.Int
	Processor common.Address
	Result    []byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSolutionSubmitted is a free log retrieval operation binding the contract event 0x847d58c674038bb7f3ec4f6bbd97d64a3da0f3db4312900c67a2778f0b2840ba.
//
// Solidity: event SolutionSubmitted(uint256 indexed actId, address indexed processor, bytes result)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterSolutionSubmitted(opts *bind.FilterOpts, actId []*big.Int, processor []common.Address) (*ERC20RealWorldAgentSolutionSubmittedIterator, error) {

	var actIdRule []interface{}
	for _, actIdItem := range actId {
		actIdRule = append(actIdRule, actIdItem)
	}
	var processorRule []interface{}
	for _, processorItem := range processor {
		processorRule = append(processorRule, processorItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "SolutionSubmitted", actIdRule, processorRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentSolutionSubmittedIterator{contract: _ERC20RealWorldAgent.contract, event: "SolutionSubmitted", logs: logs, sub: sub}, nil
}

// WatchSolutionSubmitted is a free log subscription operation binding the contract event 0x847d58c674038bb7f3ec4f6bbd97d64a3da0f3db4312900c67a2778f0b2840ba.
//
// Solidity: event SolutionSubmitted(uint256 indexed actId, address indexed processor, bytes result)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchSolutionSubmitted(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentSolutionSubmitted, actId []*big.Int, processor []common.Address) (event.Subscription, error) {

	var actIdRule []interface{}
	for _, actIdItem := range actId {
		actIdRule = append(actIdRule, actIdItem)
	}
	var processorRule []interface{}
	for _, processorItem := range processor {
		processorRule = append(processorRule, processorItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "SolutionSubmitted", actIdRule, processorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentSolutionSubmitted)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "SolutionSubmitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSolutionSubmitted is a log parse operation binding the contract event 0x847d58c674038bb7f3ec4f6bbd97d64a3da0f3db4312900c67a2778f0b2840ba.
//
// Solidity: event SolutionSubmitted(uint256 indexed actId, address indexed processor, bytes result)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseSolutionSubmitted(log types.Log) (*ERC20RealWorldAgentSolutionSubmitted, error) {
	event := new(ERC20RealWorldAgentSolutionSubmitted)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "SolutionSubmitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentTransferIterator struct {
	Event *ERC20RealWorldAgentTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentTransfer represents a Transfer event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20RealWorldAgentTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentTransferIterator{contract: _ERC20RealWorldAgent.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentTransfer)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseTransfer(log types.Log) (*ERC20RealWorldAgentTransfer, error) {
	event := new(ERC20RealWorldAgentTransfer)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20RealWorldAgentWorkerUpdatedIterator is returned from FilterWorkerUpdated and is used to iterate over the raw logs and unpacked data for WorkerUpdated events raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentWorkerUpdatedIterator struct {
	Event *ERC20RealWorldAgentWorkerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20RealWorldAgentWorkerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20RealWorldAgentWorkerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20RealWorldAgentWorkerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20RealWorldAgentWorkerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20RealWorldAgentWorkerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20RealWorldAgentWorkerUpdated represents a WorkerUpdated event raised by the ERC20RealWorldAgent contract.
type ERC20RealWorldAgentWorkerUpdated struct {
	OldWorker common.Address
	NewWorker common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterWorkerUpdated is a free log retrieval operation binding the contract event 0x98b88aa89cb5f247008e613dc8529d633ab05a62f7120c07ebcfcdd852fc2a8d.
//
// Solidity: event WorkerUpdated(address indexed oldWorker, address indexed newWorker)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) FilterWorkerUpdated(opts *bind.FilterOpts, oldWorker []common.Address, newWorker []common.Address) (*ERC20RealWorldAgentWorkerUpdatedIterator, error) {

	var oldWorkerRule []interface{}
	for _, oldWorkerItem := range oldWorker {
		oldWorkerRule = append(oldWorkerRule, oldWorkerItem)
	}
	var newWorkerRule []interface{}
	for _, newWorkerItem := range newWorker {
		newWorkerRule = append(newWorkerRule, newWorkerItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.FilterLogs(opts, "WorkerUpdated", oldWorkerRule, newWorkerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20RealWorldAgentWorkerUpdatedIterator{contract: _ERC20RealWorldAgent.contract, event: "WorkerUpdated", logs: logs, sub: sub}, nil
}

// WatchWorkerUpdated is a free log subscription operation binding the contract event 0x98b88aa89cb5f247008e613dc8529d633ab05a62f7120c07ebcfcdd852fc2a8d.
//
// Solidity: event WorkerUpdated(address indexed oldWorker, address indexed newWorker)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) WatchWorkerUpdated(opts *bind.WatchOpts, sink chan<- *ERC20RealWorldAgentWorkerUpdated, oldWorker []common.Address, newWorker []common.Address) (event.Subscription, error) {

	var oldWorkerRule []interface{}
	for _, oldWorkerItem := range oldWorker {
		oldWorkerRule = append(oldWorkerRule, oldWorkerItem)
	}
	var newWorkerRule []interface{}
	for _, newWorkerItem := range newWorker {
		newWorkerRule = append(newWorkerRule, newWorkerItem)
	}

	logs, sub, err := _ERC20RealWorldAgent.contract.WatchLogs(opts, "WorkerUpdated", oldWorkerRule, newWorkerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20RealWorldAgentWorkerUpdated)
				if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "WorkerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWorkerUpdated is a log parse operation binding the contract event 0x98b88aa89cb5f247008e613dc8529d633ab05a62f7120c07ebcfcdd852fc2a8d.
//
// Solidity: event WorkerUpdated(address indexed oldWorker, address indexed newWorker)
func (_ERC20RealWorldAgent *ERC20RealWorldAgentFilterer) ParseWorkerUpdated(log types.Log) (*ERC20RealWorldAgentWorkerUpdated, error) {
	event := new(ERC20RealWorldAgentWorkerUpdated)
	if err := _ERC20RealWorldAgent.contract.UnpackLog(event, "WorkerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
