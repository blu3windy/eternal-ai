// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tokenfactory

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TokenFactoryMetaData contains all meta data concerning the TokenFactory contract.
var TokenFactoryMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"checkToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenType\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payoutRecipient\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFee\",\"type\":\"uint256\"}],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPayoutFeeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60808060405234610016576140fe908161001c8239f35b600080fdfe608060405260043610156200001357600080fd5b60003560e01c80631c43245514620000cb5780633408e47014620000c55780635d6761e814620000bf578063715018a614620000b95780638129fc1c14620000b35780638da5cb5b14620000ad578063ac9650d814620000a7578063f1880b2414620000a1578063f2fde38b146200009b5763fee74e28146200009557600080fd5b620006c8565b62000566565b62000520565b620003f8565b6200031b565b62000226565b620001c1565b62000157565b6200013a565b34620001235760603660031901126200012357602062000114600435620000f28162000128565b602435620001008162000128565b6200010a62000c13565b6044359162000c82565b60016065556040519015158152f35b600080fd5b6001600160a01b038116036200012357565b346200012357600036600319011262000123576020604051468152f35b346200012357604036600319011262000123576020620001b86004356200017e8162000128565b602435906200018d8262000128565b60018060a01b03166000526098835260406000209060018060a01b0316600052602052604060002090565b54604051908152f35b3462000123576000806003193601126200022357620001df6200083b565b603380546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346200012357600080600319360112620002235780546200026160ff8260081c1615809281936200030c575b8115620002e9575b5062000aad565b8062000275600160ff196000541617600055565b620002ce575b6200028562000b11565b6200028d5780f35b6200029e61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a180f35b620002e361010061ff00196000541617600055565b6200027b565b303b15915081620002fd575b50386200025a565b6001915060ff161438620002f5565b600160ff821610915062000252565b346200012357600036600319011262000123576033546040516001600160a01b039091168152602090f35b60005b8381106200035a5750506000910152565b818101518382015260200162000349565b90602091620003868151809281855285808601910162000346565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310620003c75750505050505090565b9091929394958480620003e7600193603f198682030187528a516200036b565b9801930193019194939290620003b6565b602036600319011262000123576004803567ffffffffffffffff918282116200012357366023830112156200012357818101359283116200012357602490818301928236918660051b01011162000123576200045484620008f6565b9360005b81811062000474576040518062000470888262000392565b0390f35b600080620004848385896200098a565b6040939162000498855180938193620009d6565b0390305af490620004a8620009e4565b91829015620004df57505090620004d991620004c5828962000a98565b52620004d2818862000a98565b506200095e565b62000458565b8683879260448251106200012357826200051c938562000506940151830101910162000a19565b925162461bcd60e51b8152928392830162000a85565b0390fd5b34620001235760203660031901126200012357600435620005418162000128565b60018060a01b03166000526097602052602060ff604060002054166040519015158152f35b34620001235760203660031901126200012357600435620005878162000128565b620005916200083b565b6001600160a01b03811615620005ae57620005ac9062000894565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176200063557604052565b62000602565b90601f8019910116810190811067ffffffffffffffff8211176200063557604052565b67ffffffffffffffff81116200063557601f01601f191660200190565b81601f82011215620001235780359062000695826200065e565b92620006a560405194856200063b565b828452602083830101116200012357816000926020809301838601378301015290565b34620001235760c0366003190112620001235767ffffffffffffffff6024358181116200012357620006ff9036906004016200067b565b60443582811162000123576200071a9036906004016200067b565b608435620007288162000128565b60a43590620007378262000128565b6200074162000c13565b60043515620008025760405194613230938487019182118783101762000635578695620007789562000e9988396064359262000bba565b03906000f08015620007fc576001600160a01b031660008181526097602052604090207f2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e91620007ee91620007d490805460ff19166001179055565b6040516001600160a01b0390911681529081906020820190565b0390a1620005ac6001606555565b62000c07565b60405162461bcd60e51b81526020600482015260116024820152701d1bdad95b951e5c19481a5b9d985b1a59607a1b6044820152606490fd5b6033546001600160a01b031633036200085057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b603380546001600160a01b039283166001600160a01b0319821681179092559091167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b67ffffffffffffffff8111620006355760051b60200190565b906200090282620008dd565b6200091160405191826200063b565b828152809262000924601f1991620008dd565b019060005b8281106200093657505050565b80606060208093850101520162000929565b634e487b7160e01b600052601160045260246000fd5b60001981146200096e5760010190565b62000948565b634e487b7160e01b600052603260045260246000fd5b9190811015620009d05760051b81013590601e19813603018212156200012357019081359167ffffffffffffffff83116200012357602001823603811362000123579190565b62000974565b908092918237016000815290565b3d1562000a14573d90620009f8826200065e565b9162000a0860405193846200063b565b82523d6000602084013e565b606090565b602081830312620001235780519067ffffffffffffffff821162000123570181601f820112156200012357805162000a51816200065e565b9262000a6160405194856200063b565b81845260208284010111620001235762000a82916020808501910162000346565b90565b90602062000a829281815201906200036b565b8051821015620009d05760209160051b010190565b1562000ab557565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b62000b2f60ff60005460081c1662000b298162000b59565b62000b59565b62000b3a3362000894565b62000b5260ff60005460081c1662000b298162000b59565b6001606555565b1562000b6157565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b939162000be99062000bda60809598979360a0885260a08801906200036b565b9086820360208801526200036b565b60408501969096526001600160a01b03918216606085015216910152565b6040513d6000823e3d90fd5b60026065541462000c25576002606555565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9081602091031262000123575162000a828162000128565b919062000cac62000ca58460018060a01b03166000526097602052604060002090565b5460ff1690565b62000cba575b505050600090565b60405163305ae29360e01b8152926001600160a01b03906020908590600490829085165afa938415620007fc5760009462000d78575b5083161562000cb2578262000d688262000d2e62000d4c8662000d458462000d2e62000d739b60018060a01b03166000526098602052604060002090565b9060018060a01b0316600052602052604060002090565b5462000daf565b6001600160a01b03909416600090815260986020526040902090565b553090339062000dd7565b600190565b62000d9f91945060203d811162000da7575b62000d9681836200063b565b81019062000c6a565b923862000cf0565b503d62000d8a565b919082018092116200096e57565b908160209103126200012357518015158103620001235790565b9091600080949381946040519160208301946323b872dd60e01b865260018060a01b03809216602485015216604483015260648201526064815262000e1c8162000618565b51925af162000e2a620009e4565b8162000e64575b501562000e3a57565b60405162461bcd60e51b81526020600482015260026024820152612a2360f11b6044820152606490fd5b805180159250821562000e7b575b50503862000e31565b62000e90925060208091830101910162000dbd565b388062000e7256fe6101608060405234620000e0576200323080380380916200002082620000fb565b833960a08183019112620000e05781516001600160401b039290838111620000e057826200005091830162000179565b9161018051938411620000e0576200008e936200006e920162000179565b6101a0516200007c620001df565b9162000087620001f7565b936200020f565b6040516120d9908162001137823960805181611ae1015260a05181611b9c015260c05181611aab015260e05181611b3001526101005181611b560152610120518161083d015261014051816108660152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f1916610160908101906001600160401b038211908210176200012157604052565b620000e5565b604081019081106001600160401b038211176200012157604052565b60405190620001528262000127565b565b60005b838110620001685750506000910152565b818101518382015260200162000157565b81601f82011215620000e05780516001600160401b0392838211620001215760405193601f8301601f19908116603f0116850190811185821017620001215760405281845260208284010111620000e057620001dc916020808501910162000154565b90565b6101c051906001600160a01b0382168203620000e057565b6101e051906001600160a01b0382168203620000e057565b9493929094604051620002228162000127565b6001808252603160f81b6020808401918252845190999194926001600160401b038211620001215762000262826200025c600354620003b9565b620003f6565b8a601f83116001146200031e57928280620001529c9d94620002a894620002f09c9b9a99989760009362000312575b501b916000199060031b1c1916176003556200055a565b620002b3826200064d565b61012052620002c2836200075d565b61014052815191012060e052519020610100524660a052620002e3620008dc565b6080523060c052620009ae565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b88015192503862000291565b6003600052909190601f198216907fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9160005b818110620003a3575092620002f09a999897969592620001529d9e959282620002a8961062000389575b5050811b016003556200055a565b87015160001960f88460031b161c1916905538806200037b565b87830151845592850192918e01918e0162000351565b90600182811c92168015620003eb575b6020831014620003d557565b634e487b7160e01b600052602260045260246000fd5b91607f1691620003c9565b601f811162000403575050565b6000906003825260208220906020601f850160051c8301941062000444575b601f0160051c01915b8281106200043857505050565b8181556001016200042b565b909250829062000422565b601f81116200045c575050565b6000906004825260208220906020601f850160051c830194106200049d575b601f0160051c01915b8281106200049157505050565b81815560010162000484565b90925082906200047b565b601f8111620004b5575050565b6000906005825260208220906020601f850160051c83019410620004f6575b601f0160051c01915b828110620004ea57505050565b818155600101620004dd565b9092508290620004d4565b601f81116200050e575050565b6000906006825260208220906020601f850160051c830194106200054f575b601f0160051c01915b8281106200054357505050565b81815560010162000536565b90925082906200052d565b80519091906001600160401b0381116200012157620005868162000580600454620003b9565b6200044f565b602080601f8311600114620005c55750819293600092620005b9575b50508160011b916000199060031b1c191617600455565b015190503880620005a2565b6004600052601f198316949091907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000905b878210620006345750508360019596106200061a575b505050811b01600455565b015160001960f88460031b161c191690553880806200060f565b80600185968294968601518155019501930190620005f9565b90815160208082106000146200066b57505090620001dc906200086d565b6001600160401b038211620001215762000692826200068c600554620003b9565b620004a8565b80601f8311600114620006d25750819293600092620006c6575b50508160011b916000199060031b1c19161760055560ff90565b015190503880620006ac565b6005600052601f198316949091907f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0926000905b878210620007445750508360019596106200072a575b505050811b0160055560ff90565b015160001960f88460031b161c191690553880806200071c565b8060018596829496860151815501950193019062000706565b90815160208082106000146200077b57505090620001dc906200086d565b6001600160401b0382116200012157620007a2826200079c600654620003b9565b62000501565b80601f8311600114620007e25750819293600092620007d6575b50508160011b916000199060031b1c19161760065560ff90565b015190503880620007bc565b6006600052601f198316949091907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f926000905b878210620008545750508360019596106200083a575b505050811b0160065560ff90565b015160001960f88460031b161c191690553880806200082c565b8060018596829496860151815501950193019062000816565b601f8151116200089b5760208151910151602082106200088b571790565b6000198260200360031b1b161790565b6044604051809263305a27a960e01b825260206004830152620008ce815180928160248601526020868601910162000154565b601f01601f19168101030190fd5b60e051610100516040519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8452604083015260608201524660808201523060a082015260a0815260c0810181811060018060401b03821117620001215760405251902090565b156200095057565b60405162461bcd60e51b815260206004820152603060248201527f4552433230566f7465733a20746f74616c20737570706c79207269736b73206f60448201526f766572666c6f77696e6720766f74657360801b6064820152608490fd5b906001600160a01b038216801562000a585760025482810180911162000a525762000a4e9362000a3092620009e38593600255565b6001600160a01b038216600090815260208181526040808320805487019055518581527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a36200100c565b60025462000a48906001600160e01b03101562000948565b62000bbd565b5050565b62000a9d565b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b604080519192919081016001600160401b038111828210176200012157604052602081935463ffffffff81168352811c910152565b600b54906801000000000000000082101562000121576001820180600b5582101562000b5657600b600052805160209182015190911b63ffffffff191663ffffffff91909116177f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990910155565b634e487b7160e01b600052603260045260246000fd5b9081546801000000000000000081101562000121576001810180845581101562000b5657600092835260209283902082519284015190931b63ffffffff191663ffffffff9290921691909117910155565b600b549091811591821562000d055762000bd662000143565b60008152600060208201525b602081015162000c0f9062000c07906001600160e01b03165b6001600160e01b031690565b95866200111a565b9315908162000cde575b501562000c7657620001529062000c5f62000c348562000ed4565b600b600052917f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db80190565b9063ffffffff82549181199060201b169116179055565b506200015262000c9f62000c9962000c8e4362000f3e565b65ffffffffffff1690565b62000fa6565b62000cd862000cae8562000ed4565b62000cc862000cbc62000143565b63ffffffff9094168452565b6001600160e01b03166020830152565b62000ae8565b5163ffffffff16905063ffffffff62000cfb62000c8e4362000f3e565b9116143862000c19565b600b60005262000d3d7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db8820162000ab3565b62000ab3565b62000be2565b90918154918215928360001462000e475762000d5e62000143565b60008152600060208201525b602081015162000d909062000d88906001600160e01b031662000bfb565b968762001128565b9415908162000e20575b501562000dc75762000c5f620001529262000db58662000ed4565b92600019019060005260206000200190565b50620001529062000de062000c9962000c8e4362000f3e565b9062000e1a62000df08662000ed4565b62000e0a62000dfe62000143565b63ffffffff9095168552565b6001600160e01b03166020840152565b62000b6c565b5163ffffffff16905063ffffffff62000e3d62000c8e4362000f3e565b9116143862000d9a565b62000e6162000d3760001983018460005260206000200190565b62000d6a565b90918154918215928360001462000eb45762000e8262000143565b60008152600060208201525b602081015162000d909062000eac906001600160e01b031662000bfb565b96876200111a565b62000ece62000d3760001983018460005260206000200190565b62000e8e565b6001600160e01b039081811162000ee9571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b65ffffffffffff9081811162000f52571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608490fd5b63ffffffff9081811162000fb8571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b60096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b546001600160a01b03918216600090815260408120548316939290911690818414158062001110575b62001067575b50505050565b829082620010cf575b5050508162001082575b808062001061565b6001600160a01b0382166000908152600a602052604090206000805160206200321083398151915291620010b69162000e67565b60408051928352602083019190915290a238806200107a565b600080516020620032108339815191529160408285620010f69452600a6020522062000d43565b60408051928352602083019190915290a238818162001070565b508215156200105b565b90810180911162000a525790565b90810390811162000a52579056fe6080604052600436101561001257600080fd5b60003560e01c806306fdde03146101b7578063095ea7b3146101b257806318160ddd146101ad57806323b872dd146101a8578063305ae293146101a3578063313ce5671461019e5780633644e5151461019957806339509351146101945780633a46b1a81461018f5780634bf5d7e91461018a578063587cde1e146101855780635c19a95c146101805780636fcfff451461017b57806370a08231146101765780637ecebe001461017157806384b0196e1461016c5780638e539e8c1461016757806391ddadf41461016257806395d89b411461015d5780639ab24eb014610158578063a457c2d714610153578063a9059cbb1461014e578063c3cda52014610149578063d505accf14610144578063dd62ed3e1461013f5763f1127ed81461013a57600080fd5b610f65565b610f0d565b610dc7565b610c9c565b610c56565b610ba8565b610b46565b610a9f565b610a73565b61091a565b610822565b6107e8565b6107ae565b610766565b610742565b610707565b610655565b610500565b6104a8565b610485565b610469565b610440565b610375565b610357565b610326565b610210565b919082519283825260005b8481106101e8575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101c7565b90602061020d9281815201906101bc565b90565b346102f5576000806003193601126102f257604051908060035461023381610fec565b808552916001918083169081156102c8575060011461026d575b6102698561025d81870382611095565b604051918291826101fc565b0390f35b9250600383527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8284106102b057505050810160200161025d8261026961024d565b80546020858701810191909152909301928101610295565b8695506102699693506020925061025d94915060ff191682840152151560051b820101929361024d565b80fd5b600080fd5b600435906001600160a01b03821682036102f557565b602435906001600160a01b03821682036102f557565b346102f55760403660031901126102f55761034c6103426102fa565b602435903361129c565b602060405160018152f35b346102f55760003660031901126102f5576020600254604051908152f35b346102f55760603660031901126102f55761038e6102fa565b610396610310565b6001600160a01b0382166000908152600160209081526040808320338452909152902060443591905492600184016103df575b6103d3935061118e565b60405160018152602090f35b8284106103fb576103f6836103d39503338361129c565b6103c9565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b346102f55760003660031901126102f557600c546040516001600160a01b039091168152602090f35b346102f55760003660031901126102f557602060405160128152f35b346102f55760003660031901126102f55760206104a0611aa8565b604051908152f35b346102f55760403660031901126102f5576104c16102fa565b3360009081526001602090815260408083206001600160a01b038516845290915290205460243581018091116104fb5761034c913361129c565b6110b7565b346102f55760403660031901126102f5576105196102fa565b6024359061053865ffffffffffff61053043611f8b565b168310611475565b6001600160a01b03166000908152600a6020526040812080549290918360058111610604575b50905b8382106105af57505081610588575050602060005b6040516001600160e01b039091168152f35b6105a36105aa91602093600019019060005260206000200190565b5460201c90565b610576565b90926105bb8185611dbb565b90818363ffffffff6105e16105d7848960005260206000200190565b5463ffffffff1690565b1611156105f2575050925b90610561565b9094506105ff91506110cd565b6105ec565b8061061461061a92969396611dd0565b906114c1565b908263ffffffff6106356105d7858860005260206000200190565b1611156106455750925b3861055e565b9350610650906110cd565b61063f565b346102f55760003660031901126102f5574365ffffffffffff61067743611f8b565b16036106c25761026960405161068c8161103c565b601d81527f6d6f64653d626c6f636b6e756d6265722666726f6d3d64656661756c740000006020820152604051918291826101fc565b60405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a2062726f6b656e20636c6f636b206d6f64650000006044820152606490fd5b346102f55760203660031901126102f55760206001600160a01b038061072b6102fa565b166000526009825260406000205416604051908152f35b346102f55760203660031901126102f55761076461075e6102fa565b3361151a565b005b346102f55760203660031901126102f5576001600160a01b036107876102fa565b16600052600a60205260206107a0604060002054611ff2565b63ffffffff60405191168152f35b346102f55760203660031901126102f5576001600160a01b036107cf6102fa565b1660005260006020526020604060002054604051908152f35b346102f55760203660031901126102f5576001600160a01b036108096102fa565b1660005260076020526020604060002054604051908152f35b346102f5576000806003193601126102f2576108cc906108617f0000000000000000000000000000000000000000000000000000000000000000611be8565b61088a7f0000000000000000000000000000000000000000000000000000000000000000611ce1565b91604051916108988361105d565b818352604051948594600f60f81b86526108be60209360e08589015260e08801906101bc565b9086820360408801526101bc565b904660608601523060808601528260a086015284820360c08601528080855193848152019401925b82811061090357505050500390f35b8351855286955093810193928101926001016108f4565b346102f55760203660031901126102f55760043561094965ffffffffffff61094143611f8b565b168210611475565b600b549060008260058111610a0c575b50905b8282106109a9578280610976575060405160008152602090f35b600b6000526020906105aa907f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db8016105a3565b90916109b58184611dbb565b600b600052908263ffffffff6109ec7f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db985016105d7565b1611156109fc5750915b9061095c565b9250610a07906110cd565b6109f6565b80610614610a1c92959395611dd0565b600b600052908263ffffffff610a537f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db985016105d7565b161115610a635750915b38610959565b9250610a6e906110cd565b610a5d565b346102f55760003660031901126102f5576020610a8f43611f8b565b65ffffffffffff60405191168152f35b346102f5576000806003193601126102f2576040519080600454610ac281610fec565b808552916001918083169081156102c85750600114610aeb576102698561025d81870382611095565b9250600483527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b828410610b2e57505050810160200161025d8261026961024d565b80546020858701810191909152909301928101610b13565b346102f55760203660031901126102f5576001600160a01b03610b676102fa565b16600052600a602052604060002080548015600014610b8e57505060405160008152602090f35b602091610b9f916000190190611425565b5054811c610576565b346102f55760403660031901126102f557610bc16102fa565b60243590336000526001602052610bee8160406000209060018060a01b0316600052602052604060002090565b5491808310610c03576103d39203903361129c565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608490fd5b346102f55760403660031901126102f55761034c610c726102fa565b602435903361118e565b6064359060ff821682036102f557565b6084359060ff821682036102f557565b346102f55760c03660031901126102f557610cb56102fa565b60443590602435610cc4610c7c565b92804211610d8257610d54610d7d916107649560405190610d3c82610d2e6020820195898b8860609194939260808201957fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf835260018060a01b0316602083015260408201520152565b03601f198101845283611095565b610d4f60a4359360843593519020611bc2565b6118c2565b6001600160a01b03811660009081526007602052604090208054600181019091559092146114ce565b61151a565b60405162461bcd60e51b815260206004820152601d60248201527f4552433230566f7465733a207369676e617475726520657870697265640000006044820152606490fd5b346102f55760e03660031901126102f557610de06102fa565b610de8610310565b6044359060643592610df8610c8c565b93804211610ec857610eb0610ec391610d2e61076497610e9d610e368760018060a01b03166000526007602052604060002090815491600183019055565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9602082019081526001600160a01b03808c1693830193909352918b166060820152608081018c905260a081019290925260c082019590955292839060e0820190565b610d4f60c4359360a43593519020611bc2565b6001600160a01b038381169116146113cc565b61129c565b60405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e650000006044820152606490fd5b346102f55760403660031901126102f5576020610f5c610f2b6102fa565b610f33610310565b6001600160a01b0391821660009081526001855260408082209290931681526020919091522090565b54604051908152f35b346102f55760403660031901126102f557610f7e6102fa565b63ffffffff60243581811681036102f557610fc8610fce91604094600060208751610fa88161103c565b82815201526001600160a01b03166000908152600a602052859020611425565b50611453565b8251815190921682526020908101516001600160e01b031690820152f35b90600182811c9216801561101c575b602083101461100657565b634e487b7160e01b600052602260045260246000fd5b91607f1691610ffb565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761105857604052565b611026565b6020810190811067ffffffffffffffff82111761105857604052565b60c0810190811067ffffffffffffffff82111761105857604052565b90601f8019910116810190811067ffffffffffffffff82111761105857604052565b634e487b7160e01b600052601160045260246000fd5b90600182018092116104fb57565b156110e257565b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b1561113a57565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b6001600160a01b03929190838116801561124957611247948316906111b48215156110db565b6001600160a01b03831660009081526020819052604090208590546111db82821015611133565b036111f88460018060a01b03166000526000602052604060002090565b556001600160a01b0384166000908152602081815260409182902080548801905590518681527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9190a3612057565b565b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03808216929190831561137b57821693841561132b57806113157f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925946112fe6113269560018060a01b03166000526001602052604060002090565b9060018060a01b0316600052602052604060002090565b556040519081529081906020820190565b0390a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b156113d357565b60405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e617475726500006044820152606490fd5b604051906112478261103c565b805482101561143d5760005260206000200190600090565b634e487b7160e01b600052603260045260246000fd5b906040516114608161103c565b602081935463ffffffff81168352811c910152565b1561147c57565b60405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20667574757265206c6f6f6b7570000000000000006044820152606490fd5b919082039182116104fb57565b156114d557565b60405162461bcd60e51b815260206004820152601960248201527f4552433230566f7465733a20696e76616c6964206e6f6e6365000000000000006044820152606490fd5b6112479160018060a01b038092166000928184526009602052806040852054168092856020527f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60408720549660096020526040812094871694856bffffffffffffffffffffffff60a01b82541617905580a45b6001600160a01b038083169392911680841415806117a1575b6115b2575b50505050565b80611620575b50826115c5575b806115ac565b6001600160a01b03166000908152600a602052604090207fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7249161160791611809565b60408051928352602083019190915290a23880806115bf565b80600052600a6020527fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724604060002080548015918260001461177e57611664611418565b6000815260006020820152915b6020830151611690906001600160e01b03165b6001600160e01b031690565b9261169b8985612089565b9415908161175b575b50156116f9576116cc6116e3926116ba86611f22565b92600019019060005260206000200190565b9063ffffffff82549181199060201b169116179055565b604080519182526020820192909252a2386115b8565b506117569061171d61171861170d43611f8b565b65ffffffffffff1690565b611ff2565b9061175161172a86611f22565b611741611735611418565b63ffffffff9095168552565b6001600160e01b03166020840152565b6117aa565b6116e3565b5163ffffffff16905063ffffffff61177561170d43611f8b565b911614386116a4565b61179b61179660001984018360005260206000200190565b611453565b91611671565b508215156115a7565b805468010000000000000000811015611058576117cc91600182018155611425565b6117f357815160209283015190921b63ffffffff191663ffffffff92909216919091179055565b634e487b7160e01b600052600060045260246000fd5b9091815491821592836000146118a557611821611418565b60008152600060208201525b602081015161184f90611848906001600160e01b0316611684565b9687612096565b94159081611882575b501561186e576116cc611247926116ba86611f22565b506112479061171d61171861170d43611f8b565b5163ffffffff16905063ffffffff61189c61170d43611f8b565b91161438611858565b6118bd61179660001983018460005260206000200190565b61182d565b9161020d93916118d193611a19565b9190916118f9565b600511156118e357565b634e487b7160e01b600052602160045260246000fd5b611902816118d9565b8061190a5750565b611913816118d9565b600181036119605760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b611969816118d9565b600281036119b65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b806119c26003926118d9565b146119c957565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311611a9c5791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa15611a8f5781516001600160a01b03811615611a89579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03161480611b99575b15611b03577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152611b9381611079565b51902090565b507f00000000000000000000000000000000000000000000000000000000000000004614611ada565b604290611bcd611aa8565b906040519161190160f01b8352600283015260228201522090565b60ff8114611c265760ff811690601f8211611c145760405191611c0a8361103c565b8252602082015290565b604051632cd44ac360e21b8152600490fd5b50604051600554816000611c3983610fec565b80835292600190818116908115611cbf5750600114611c60575b5061020d92500382611095565b6005600090815291507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b848310611ca4575061020d935050810160200138611c53565b81935090816020925483858901015201910190918492611c8b565b90506020925061020d94915060ff191682840152151560051b82010138611c53565b60ff8114611d035760ff811690601f8211611c145760405191611c0a8361103c565b50604051600654816000611d1683610fec565b80835292600190818116908115611cbf5750600114611d3c575061020d92500382611095565b6006600090815291507ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f5b848310611d80575061020d935050810160200138611c53565b81935090816020925483858901015201910190918492611d67565b8115611da5570490565b634e487b7160e01b600052601260045260246000fd5b90808216911860011c81018091116104fb5790565b8015611f0a5780611ea3611e9c611e92611e88611e7e611e74611e6a611e60600161020d9a6000908b60801c80611efe575b508060401c80611ef1575b508060201c80611ee4575b508060101c80611ed7575b508060081c80611eca575b508060041c80611ebd575b508060021c80611eb0575b50821c611ea9575b811c1b611e59818b611d9b565b0160011c90565b611e59818a611d9b565b611e598189611d9b565b611e598188611d9b565b611e598187611d9b565b611e598186611d9b565b611e598185611d9b565b8092611d9b565b90611f10565b8101611e4c565b6002915091019038611e44565b6004915091019038611e39565b6008915091019038611e2e565b6010915091019038611e23565b6020915091019038611e18565b6040915091019038611e0d565b91505060809038611e02565b50600090565b9080821015611f1d575090565b905090565b6001600160e01b0390818111611f36571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20326044820152663234206269747360c81b6064820152608490fd5b65ffffffffffff90818111611f9e571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201526538206269747360d01b6064820152608490fd5b63ffffffff90818111612003571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608490fd5b6001600160a01b039081166000908152600960205260408082205493831682529020546112479392908216911661158e565b9081039081116104fb5790565b9081018091116104fb579056fea2646970667358221220563db4143b38c671b803fb1f7ab32d04ee3e24211cf1195a726d47728fccc54c64736f6c63430008130033dec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724a26469706673582212208ca201b334bc2e5514f0da3c748c65d31db5bfa7b2485e76ec5ef13997232e1c64736f6c63430008130033",
}

// TokenFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenFactoryMetaData.ABI instead.
var TokenFactoryABI = TokenFactoryMetaData.ABI

// TokenFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenFactoryMetaData.Bin instead.
var TokenFactoryBin = TokenFactoryMetaData.Bin

// DeployTokenFactory deploys a new Ethereum contract, binding an instance of TokenFactory to it.
func DeployTokenFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TokenFactory, error) {
	parsed, err := TokenFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenFactory{TokenFactoryCaller: TokenFactoryCaller{contract: contract}, TokenFactoryTransactor: TokenFactoryTransactor{contract: contract}, TokenFactoryFilterer: TokenFactoryFilterer{contract: contract}}, nil
}

// TokenFactory is an auto generated Go binding around an Ethereum contract.
type TokenFactory struct {
	TokenFactoryCaller     // Read-only binding to the contract
	TokenFactoryTransactor // Write-only binding to the contract
	TokenFactoryFilterer   // Log filterer for contract events
}

// TokenFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenFactorySession struct {
	Contract     *TokenFactory     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenFactoryCallerSession struct {
	Contract *TokenFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TokenFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenFactoryTransactorSession struct {
	Contract     *TokenFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TokenFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenFactoryRaw struct {
	Contract *TokenFactory // Generic contract binding to access the raw methods on
}

// TokenFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenFactoryCallerRaw struct {
	Contract *TokenFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// TokenFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenFactoryTransactorRaw struct {
	Contract *TokenFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenFactory creates a new instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactory(address common.Address, backend bind.ContractBackend) (*TokenFactory, error) {
	contract, err := bindTokenFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenFactory{TokenFactoryCaller: TokenFactoryCaller{contract: contract}, TokenFactoryTransactor: TokenFactoryTransactor{contract: contract}, TokenFactoryFilterer: TokenFactoryFilterer{contract: contract}}, nil
}

// NewTokenFactoryCaller creates a new read-only instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactoryCaller(address common.Address, caller bind.ContractCaller) (*TokenFactoryCaller, error) {
	contract, err := bindTokenFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryCaller{contract: contract}, nil
}

// NewTokenFactoryTransactor creates a new write-only instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenFactoryTransactor, error) {
	contract, err := bindTokenFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryTransactor{contract: contract}, nil
}

// NewTokenFactoryFilterer creates a new log filterer instance of TokenFactory, bound to a specific deployed contract.
func NewTokenFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenFactoryFilterer, error) {
	contract, err := bindTokenFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryFilterer{contract: contract}, nil
}

// bindTokenFactory binds a generic wrapper to an already deployed contract.
func bindTokenFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TokenFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenFactory *TokenFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenFactory.Contract.TokenFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenFactory *TokenFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFactory.Contract.TokenFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenFactory *TokenFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenFactory.Contract.TokenFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenFactory *TokenFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenFactory *TokenFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenFactory *TokenFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenFactory.Contract.contract.Transact(opts, method, params...)
}

// CheckToken is a free data retrieval call binding the contract method 0xf1880b24.
//
// Solidity: function checkToken(address ) view returns(bool)
func (_TokenFactory *TokenFactoryCaller) CheckToken(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _TokenFactory.contract.Call(opts, &out, "checkToken", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckToken is a free data retrieval call binding the contract method 0xf1880b24.
//
// Solidity: function checkToken(address ) view returns(bool)
func (_TokenFactory *TokenFactorySession) CheckToken(arg0 common.Address) (bool, error) {
	return _TokenFactory.Contract.CheckToken(&_TokenFactory.CallOpts, arg0)
}

// CheckToken is a free data retrieval call binding the contract method 0xf1880b24.
//
// Solidity: function checkToken(address ) view returns(bool)
func (_TokenFactory *TokenFactoryCallerSession) CheckToken(arg0 common.Address) (bool, error) {
	return _TokenFactory.Contract.CheckToken(&_TokenFactory.CallOpts, arg0)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_TokenFactory *TokenFactoryCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TokenFactory.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_TokenFactory *TokenFactorySession) GetChainId() (*big.Int, error) {
	return _TokenFactory.Contract.GetChainId(&_TokenFactory.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_TokenFactory *TokenFactoryCallerSession) GetChainId() (*big.Int, error) {
	return _TokenFactory.Contract.GetChainId(&_TokenFactory.CallOpts)
}

// GetPayoutFeeBalance is a free data retrieval call binding the contract method 0x5d6761e8.
//
// Solidity: function getPayoutFeeBalance(address , address ) view returns(uint256)
func (_TokenFactory *TokenFactoryCaller) GetPayoutFeeBalance(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TokenFactory.contract.Call(opts, &out, "getPayoutFeeBalance", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPayoutFeeBalance is a free data retrieval call binding the contract method 0x5d6761e8.
//
// Solidity: function getPayoutFeeBalance(address , address ) view returns(uint256)
func (_TokenFactory *TokenFactorySession) GetPayoutFeeBalance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _TokenFactory.Contract.GetPayoutFeeBalance(&_TokenFactory.CallOpts, arg0, arg1)
}

// GetPayoutFeeBalance is a free data retrieval call binding the contract method 0x5d6761e8.
//
// Solidity: function getPayoutFeeBalance(address , address ) view returns(uint256)
func (_TokenFactory *TokenFactoryCallerSession) GetPayoutFeeBalance(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _TokenFactory.Contract.GetPayoutFeeBalance(&_TokenFactory.CallOpts, arg0, arg1)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenFactory *TokenFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenFactory *TokenFactorySession) Owner() (common.Address, error) {
	return _TokenFactory.Contract.Owner(&_TokenFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenFactory *TokenFactoryCallerSession) Owner() (common.Address, error) {
	return _TokenFactory.Contract.Owner(&_TokenFactory.CallOpts)
}

// CreateToken is a paid mutator transaction binding the contract method 0xfee74e28.
//
// Solidity: function createToken(uint256 tokenType, string name, string symbol, uint256 amount, address recipient, address payoutRecipient) returns()
func (_TokenFactory *TokenFactoryTransactor) CreateToken(opts *bind.TransactOpts, tokenType *big.Int, name string, symbol string, amount *big.Int, recipient common.Address, payoutRecipient common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "createToken", tokenType, name, symbol, amount, recipient, payoutRecipient)
}

// CreateToken is a paid mutator transaction binding the contract method 0xfee74e28.
//
// Solidity: function createToken(uint256 tokenType, string name, string symbol, uint256 amount, address recipient, address payoutRecipient) returns()
func (_TokenFactory *TokenFactorySession) CreateToken(tokenType *big.Int, name string, symbol string, amount *big.Int, recipient common.Address, payoutRecipient common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.CreateToken(&_TokenFactory.TransactOpts, tokenType, name, symbol, amount, recipient, payoutRecipient)
}

// CreateToken is a paid mutator transaction binding the contract method 0xfee74e28.
//
// Solidity: function createToken(uint256 tokenType, string name, string symbol, uint256 amount, address recipient, address payoutRecipient) returns()
func (_TokenFactory *TokenFactoryTransactorSession) CreateToken(tokenType *big.Int, name string, symbol string, amount *big.Int, recipient common.Address, payoutRecipient common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.CreateToken(&_TokenFactory.TransactOpts, tokenType, name, symbol, amount, recipient, payoutRecipient)
}

// DepositFee is a paid mutator transaction binding the contract method 0x1c432455.
//
// Solidity: function depositFee(address token, address tokenFee, uint256 amountFee) returns(bool)
func (_TokenFactory *TokenFactoryTransactor) DepositFee(opts *bind.TransactOpts, token common.Address, tokenFee common.Address, amountFee *big.Int) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "depositFee", token, tokenFee, amountFee)
}

// DepositFee is a paid mutator transaction binding the contract method 0x1c432455.
//
// Solidity: function depositFee(address token, address tokenFee, uint256 amountFee) returns(bool)
func (_TokenFactory *TokenFactorySession) DepositFee(token common.Address, tokenFee common.Address, amountFee *big.Int) (*types.Transaction, error) {
	return _TokenFactory.Contract.DepositFee(&_TokenFactory.TransactOpts, token, tokenFee, amountFee)
}

// DepositFee is a paid mutator transaction binding the contract method 0x1c432455.
//
// Solidity: function depositFee(address token, address tokenFee, uint256 amountFee) returns(bool)
func (_TokenFactory *TokenFactoryTransactorSession) DepositFee(token common.Address, tokenFee common.Address, amountFee *big.Int) (*types.Transaction, error) {
	return _TokenFactory.Contract.DepositFee(&_TokenFactory.TransactOpts, token, tokenFee, amountFee)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenFactory *TokenFactoryTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenFactory *TokenFactorySession) Initialize() (*types.Transaction, error) {
	return _TokenFactory.Contract.Initialize(&_TokenFactory.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_TokenFactory *TokenFactoryTransactorSession) Initialize() (*types.Transaction, error) {
	return _TokenFactory.Contract.Initialize(&_TokenFactory.TransactOpts)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_TokenFactory *TokenFactoryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_TokenFactory *TokenFactorySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _TokenFactory.Contract.Multicall(&_TokenFactory.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_TokenFactory *TokenFactoryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _TokenFactory.Contract.Multicall(&_TokenFactory.TransactOpts, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenFactory *TokenFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenFactory *TokenFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenFactory.Contract.RenounceOwnership(&_TokenFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenFactory *TokenFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenFactory.Contract.RenounceOwnership(&_TokenFactory.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenFactory *TokenFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TokenFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenFactory *TokenFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.TransferOwnership(&_TokenFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenFactory *TokenFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenFactory.Contract.TransferOwnership(&_TokenFactory.TransactOpts, newOwner)
}

// TokenFactoryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TokenFactory contract.
type TokenFactoryInitializedIterator struct {
	Event *TokenFactoryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryInitialized represents a Initialized event raised by the TokenFactory contract.
type TokenFactoryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TokenFactory *TokenFactoryFilterer) FilterInitialized(opts *bind.FilterOpts) (*TokenFactoryInitializedIterator, error) {

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TokenFactoryInitializedIterator{contract: _TokenFactory.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TokenFactory *TokenFactoryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TokenFactoryInitialized) (event.Subscription, error) {

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryInitialized)
				if err := _TokenFactory.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TokenFactory *TokenFactoryFilterer) ParseInitialized(log types.Log) (*TokenFactoryInitialized, error) {
	event := new(TokenFactoryInitialized)
	if err := _TokenFactory.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenFactory contract.
type TokenFactoryOwnershipTransferredIterator struct {
	Event *TokenFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the TokenFactory contract.
type TokenFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenFactory *TokenFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenFactoryOwnershipTransferredIterator{contract: _TokenFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenFactory *TokenFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryOwnershipTransferred)
				if err := _TokenFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenFactory *TokenFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*TokenFactoryOwnershipTransferred, error) {
	event := new(TokenFactoryOwnershipTransferred)
	if err := _TokenFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenFactoryTokenCreatedIterator is returned from FilterTokenCreated and is used to iterate over the raw logs and unpacked data for TokenCreated events raised by the TokenFactory contract.
type TokenFactoryTokenCreatedIterator struct {
	Event *TokenFactoryTokenCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenFactoryTokenCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenFactoryTokenCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenFactoryTokenCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenFactoryTokenCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenFactoryTokenCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenFactoryTokenCreated represents a TokenCreated event raised by the TokenFactory contract.
type TokenFactoryTokenCreated struct {
	Token common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTokenCreated is a free log retrieval operation binding the contract event 0x2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e.
//
// Solidity: event TokenCreated(address token)
func (_TokenFactory *TokenFactoryFilterer) FilterTokenCreated(opts *bind.FilterOpts) (*TokenFactoryTokenCreatedIterator, error) {

	logs, sub, err := _TokenFactory.contract.FilterLogs(opts, "TokenCreated")
	if err != nil {
		return nil, err
	}
	return &TokenFactoryTokenCreatedIterator{contract: _TokenFactory.contract, event: "TokenCreated", logs: logs, sub: sub}, nil
}

// WatchTokenCreated is a free log subscription operation binding the contract event 0x2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e.
//
// Solidity: event TokenCreated(address token)
func (_TokenFactory *TokenFactoryFilterer) WatchTokenCreated(opts *bind.WatchOpts, sink chan<- *TokenFactoryTokenCreated) (event.Subscription, error) {

	logs, sub, err := _TokenFactory.contract.WatchLogs(opts, "TokenCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenFactoryTokenCreated)
				if err := _TokenFactory.contract.UnpackLog(event, "TokenCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenCreated is a log parse operation binding the contract event 0x2e2b3f61b70d2d131b2a807371103cc98d51adcaa5e9a8f9c32658ad8426e74e.
//
// Solidity: event TokenCreated(address token)
func (_TokenFactory *TokenFactoryFilterer) ParseTokenCreated(log types.Log) (*TokenFactoryTokenCreated, error) {
	event := new(TokenFactoryTokenCreated)
	if err := _TokenFactory.contract.UnpackLog(event, "TokenCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
