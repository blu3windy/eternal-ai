// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package erc20utilityagent

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BytecodeSlice is an auto generated low-level Go binding around an user-defined struct.
type BytecodeSlice struct {
	Pointer common.Address
	Start   uint32
	End     uint32
}

// ERC20VotesCheckpoint is an auto generated low-level Go binding around an user-defined struct.
type ERC20VotesCheckpoint struct {
	FromBlock uint32
	Votes     *big.Int
}

// File is an auto generated low-level Go binding around an user-defined struct.
type File struct {
	Size   *big.Int
	Slices []BytecodeSlice
}

// IUtilityAgentStorageInfo is an auto generated low-level Go binding around an user-defined struct.
type IUtilityAgentStorageInfo struct {
	ContractAddress common.Address
	Filename        string
}

// ERC20UtilityAgentMetaData contains all meta data concerning the ERC20UtilityAgent contract.
var ERC20UtilityAgentMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"promptScheduler_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"modelAddress_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"systemPrompt_\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"storageInfo_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"hybridModel\",\"type\":\"address\"}],\"name\":\"ModelUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inferId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"PromptPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promptScheduler\",\"type\":\"address\"}],\"name\":\"PromptSchedulerHubUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"systemPrompt\",\"type\":\"string\"}],\"name\":\"SystemPromptUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint224\",\"name\":\"votes\",\"type\":\"uint224\"}],\"internalType\":\"structERC20Votes.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"logic\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFileStorageChunkInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"start\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"end\",\"type\":\"uint32\"}],\"internalType\":\"structBytecodeSlice[]\",\"name\":\"slices\",\"type\":\"tuple[]\"}],\"internalType\":\"structFile\",\"name\":\"file\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModelAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPromptSchedulerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getResultById\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"filename\",\"type\":\"string\"}],\"internalType\":\"structIUtilityAgent.StorageInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStorageMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemPrompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"inferId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"filename\",\"type\":\"string\"}],\"name\":\"updateFileName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"modelAddress\",\"type\":\"address\"}],\"name\":\"updateModelAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"promptScheduler\",\"type\":\"address\"}],\"name\":\"updatePromptScheduler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"systemPrompt\",\"type\":\"string\"}],\"name\":\"updateSystemPrompt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ERC20UtilityAgentABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20UtilityAgentMetaData.ABI instead.
var ERC20UtilityAgentABI = ERC20UtilityAgentMetaData.ABI

// ERC20UtilityAgentBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20UtilityAgentMetaData.Bin instead.
var ERC20UtilityAgentBin = ERC20UtilityAgentMetaData.Bin

// DeployERC20UtilityAgent deploys a new Ethereum contract, binding an instance of ERC20UtilityAgent to it.
func DeployERC20UtilityAgent(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, amount_ *big.Int, recipient_ common.Address, promptScheduler_ common.Address, modelAddress_ common.Address, systemPrompt_ string, storageInfo_ []byte) (common.Address, *types.Transaction, *ERC20UtilityAgent, error) {
	parsed, err := ERC20UtilityAgentMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20UtilityAgentBin), backend, name_, symbol_, amount_, recipient_, promptScheduler_, modelAddress_, systemPrompt_, storageInfo_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20UtilityAgent{ERC20UtilityAgentCaller: ERC20UtilityAgentCaller{contract: contract}, ERC20UtilityAgentTransactor: ERC20UtilityAgentTransactor{contract: contract}, ERC20UtilityAgentFilterer: ERC20UtilityAgentFilterer{contract: contract}}, nil
}

// ERC20UtilityAgent is an auto generated Go binding around an Ethereum contract.
type ERC20UtilityAgent struct {
	ERC20UtilityAgentCaller     // Read-only binding to the contract
	ERC20UtilityAgentTransactor // Write-only binding to the contract
	ERC20UtilityAgentFilterer   // Log filterer for contract events
}

// ERC20UtilityAgentCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20UtilityAgentCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20UtilityAgentTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20UtilityAgentTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20UtilityAgentFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20UtilityAgentFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20UtilityAgentSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20UtilityAgentSession struct {
	Contract     *ERC20UtilityAgent // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ERC20UtilityAgentCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20UtilityAgentCallerSession struct {
	Contract *ERC20UtilityAgentCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// ERC20UtilityAgentTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20UtilityAgentTransactorSession struct {
	Contract     *ERC20UtilityAgentTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// ERC20UtilityAgentRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20UtilityAgentRaw struct {
	Contract *ERC20UtilityAgent // Generic contract binding to access the raw methods on
}

// ERC20UtilityAgentCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20UtilityAgentCallerRaw struct {
	Contract *ERC20UtilityAgentCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20UtilityAgentTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20UtilityAgentTransactorRaw struct {
	Contract *ERC20UtilityAgentTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20UtilityAgent creates a new instance of ERC20UtilityAgent, bound to a specific deployed contract.
func NewERC20UtilityAgent(address common.Address, backend bind.ContractBackend) (*ERC20UtilityAgent, error) {
	contract, err := bindERC20UtilityAgent(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgent{ERC20UtilityAgentCaller: ERC20UtilityAgentCaller{contract: contract}, ERC20UtilityAgentTransactor: ERC20UtilityAgentTransactor{contract: contract}, ERC20UtilityAgentFilterer: ERC20UtilityAgentFilterer{contract: contract}}, nil
}

// NewERC20UtilityAgentCaller creates a new read-only instance of ERC20UtilityAgent, bound to a specific deployed contract.
func NewERC20UtilityAgentCaller(address common.Address, caller bind.ContractCaller) (*ERC20UtilityAgentCaller, error) {
	contract, err := bindERC20UtilityAgent(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentCaller{contract: contract}, nil
}

// NewERC20UtilityAgentTransactor creates a new write-only instance of ERC20UtilityAgent, bound to a specific deployed contract.
func NewERC20UtilityAgentTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20UtilityAgentTransactor, error) {
	contract, err := bindERC20UtilityAgent(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentTransactor{contract: contract}, nil
}

// NewERC20UtilityAgentFilterer creates a new log filterer instance of ERC20UtilityAgent, bound to a specific deployed contract.
func NewERC20UtilityAgentFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20UtilityAgentFilterer, error) {
	contract, err := bindERC20UtilityAgent(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentFilterer{contract: contract}, nil
}

// bindERC20UtilityAgent binds a generic wrapper to an already deployed contract.
func bindERC20UtilityAgent(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20UtilityAgentMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20UtilityAgent *ERC20UtilityAgentRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20UtilityAgent.Contract.ERC20UtilityAgentCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20UtilityAgent *ERC20UtilityAgentRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.ERC20UtilityAgentTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20UtilityAgent *ERC20UtilityAgentRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.ERC20UtilityAgentTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20UtilityAgent.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.contract.Transact(opts, method, params...)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) CLOCKMODE(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "CLOCK_MODE")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) CLOCKMODE() (string, error) {
	return _ERC20UtilityAgent.Contract.CLOCKMODE(&_ERC20UtilityAgent.CallOpts)
}

// CLOCKMODE is a free data retrieval call binding the contract method 0x4bf5d7e9.
//
// Solidity: function CLOCK_MODE() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) CLOCKMODE() (string, error) {
	return _ERC20UtilityAgent.Contract.CLOCKMODE(&_ERC20UtilityAgent.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ERC20UtilityAgent.Contract.DOMAINSEPARATOR(&_ERC20UtilityAgent.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _ERC20UtilityAgent.Contract.DOMAINSEPARATOR(&_ERC20UtilityAgent.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.Allowance(&_ERC20UtilityAgent.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.Allowance(&_ERC20UtilityAgent.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.BalanceOf(&_ERC20UtilityAgent.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.BalanceOf(&_ERC20UtilityAgent.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Checkpoints(opts *bind.CallOpts, account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "checkpoints", account, pos)

	if err != nil {
		return *new(ERC20VotesCheckpoint), err
	}

	out0 := *abi.ConvertType(out[0], new(ERC20VotesCheckpoint)).(*ERC20VotesCheckpoint)

	return out0, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _ERC20UtilityAgent.Contract.Checkpoints(&_ERC20UtilityAgent.CallOpts, account, pos)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address account, uint32 pos) view returns((uint32,uint224))
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Checkpoints(account common.Address, pos uint32) (ERC20VotesCheckpoint, error) {
	return _ERC20UtilityAgent.Contract.Checkpoints(&_ERC20UtilityAgent.CallOpts, account, pos)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Clock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "clock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Clock() (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.Clock(&_ERC20UtilityAgent.CallOpts)
}

// Clock is a free data retrieval call binding the contract method 0x91ddadf4.
//
// Solidity: function clock() view returns(uint48)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Clock() (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.Clock(&_ERC20UtilityAgent.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Decimals() (uint8, error) {
	return _ERC20UtilityAgent.Contract.Decimals(&_ERC20UtilityAgent.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Decimals() (uint8, error) {
	return _ERC20UtilityAgent.Contract.Decimals(&_ERC20UtilityAgent.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Delegates(opts *bind.CallOpts, account common.Address) (common.Address, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "delegates", account)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Delegates(account common.Address) (common.Address, error) {
	return _ERC20UtilityAgent.Contract.Delegates(&_ERC20UtilityAgent.CallOpts, account)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address account) view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Delegates(account common.Address) (common.Address, error) {
	return _ERC20UtilityAgent.Contract.Delegates(&_ERC20UtilityAgent.CallOpts, account)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ERC20UtilityAgent.Contract.Eip712Domain(&_ERC20UtilityAgent.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _ERC20UtilityAgent.Contract.Eip712Domain(&_ERC20UtilityAgent.CallOpts)
}

// FetchCode is a free data retrieval call binding the contract method 0x1d959e5d.
//
// Solidity: function fetchCode() view returns(string logic)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) FetchCode(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "fetchCode")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// FetchCode is a free data retrieval call binding the contract method 0x1d959e5d.
//
// Solidity: function fetchCode() view returns(string logic)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) FetchCode() (string, error) {
	return _ERC20UtilityAgent.Contract.FetchCode(&_ERC20UtilityAgent.CallOpts)
}

// FetchCode is a free data retrieval call binding the contract method 0x1d959e5d.
//
// Solidity: function fetchCode() view returns(string logic)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) FetchCode() (string, error) {
	return _ERC20UtilityAgent.Contract.FetchCode(&_ERC20UtilityAgent.CallOpts)
}

// GetFileStorageChunkInfo is a free data retrieval call binding the contract method 0xb213c508.
//
// Solidity: function getFileStorageChunkInfo() view returns((uint256,(address,uint32,uint32)[]) file)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetFileStorageChunkInfo(opts *bind.CallOpts) (File, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getFileStorageChunkInfo")

	if err != nil {
		return *new(File), err
	}

	out0 := *abi.ConvertType(out[0], new(File)).(*File)

	return out0, err

}

// GetFileStorageChunkInfo is a free data retrieval call binding the contract method 0xb213c508.
//
// Solidity: function getFileStorageChunkInfo() view returns((uint256,(address,uint32,uint32)[]) file)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetFileStorageChunkInfo() (File, error) {
	return _ERC20UtilityAgent.Contract.GetFileStorageChunkInfo(&_ERC20UtilityAgent.CallOpts)
}

// GetFileStorageChunkInfo is a free data retrieval call binding the contract method 0xb213c508.
//
// Solidity: function getFileStorageChunkInfo() view returns((uint256,(address,uint32,uint32)[]) file)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetFileStorageChunkInfo() (File, error) {
	return _ERC20UtilityAgent.Contract.GetFileStorageChunkInfo(&_ERC20UtilityAgent.CallOpts)
}

// GetModelAddress is a free data retrieval call binding the contract method 0x0acd6556.
//
// Solidity: function getModelAddress() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetModelAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getModelAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetModelAddress is a free data retrieval call binding the contract method 0x0acd6556.
//
// Solidity: function getModelAddress() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetModelAddress() (common.Address, error) {
	return _ERC20UtilityAgent.Contract.GetModelAddress(&_ERC20UtilityAgent.CallOpts)
}

// GetModelAddress is a free data retrieval call binding the contract method 0x0acd6556.
//
// Solidity: function getModelAddress() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetModelAddress() (common.Address, error) {
	return _ERC20UtilityAgent.Contract.GetModelAddress(&_ERC20UtilityAgent.CallOpts)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetPastTotalSupply(opts *bind.CallOpts, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getPastTotalSupply", timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.GetPastTotalSupply(&_ERC20UtilityAgent.CallOpts, timepoint)
}

// GetPastTotalSupply is a free data retrieval call binding the contract method 0x8e539e8c.
//
// Solidity: function getPastTotalSupply(uint256 timepoint) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetPastTotalSupply(timepoint *big.Int) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.GetPastTotalSupply(&_ERC20UtilityAgent.CallOpts, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetPastVotes(opts *bind.CallOpts, account common.Address, timepoint *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getPastVotes", account, timepoint)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.GetPastVotes(&_ERC20UtilityAgent.CallOpts, account, timepoint)
}

// GetPastVotes is a free data retrieval call binding the contract method 0x3a46b1a8.
//
// Solidity: function getPastVotes(address account, uint256 timepoint) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetPastVotes(account common.Address, timepoint *big.Int) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.GetPastVotes(&_ERC20UtilityAgent.CallOpts, account, timepoint)
}

// GetPromptSchedulerAddress is a free data retrieval call binding the contract method 0xd36c71e3.
//
// Solidity: function getPromptSchedulerAddress() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetPromptSchedulerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getPromptSchedulerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPromptSchedulerAddress is a free data retrieval call binding the contract method 0xd36c71e3.
//
// Solidity: function getPromptSchedulerAddress() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetPromptSchedulerAddress() (common.Address, error) {
	return _ERC20UtilityAgent.Contract.GetPromptSchedulerAddress(&_ERC20UtilityAgent.CallOpts)
}

// GetPromptSchedulerAddress is a free data retrieval call binding the contract method 0xd36c71e3.
//
// Solidity: function getPromptSchedulerAddress() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetPromptSchedulerAddress() (common.Address, error) {
	return _ERC20UtilityAgent.Contract.GetPromptSchedulerAddress(&_ERC20UtilityAgent.CallOpts)
}

// GetResultById is a free data retrieval call binding the contract method 0x08112bdf.
//
// Solidity: function getResultById(uint256 id) view returns(bytes)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetResultById(opts *bind.CallOpts, id *big.Int) ([]byte, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getResultById", id)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetResultById is a free data retrieval call binding the contract method 0x08112bdf.
//
// Solidity: function getResultById(uint256 id) view returns(bytes)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetResultById(id *big.Int) ([]byte, error) {
	return _ERC20UtilityAgent.Contract.GetResultById(&_ERC20UtilityAgent.CallOpts, id)
}

// GetResultById is a free data retrieval call binding the contract method 0x08112bdf.
//
// Solidity: function getResultById(uint256 id) view returns(bytes)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetResultById(id *big.Int) ([]byte, error) {
	return _ERC20UtilityAgent.Contract.GetResultById(&_ERC20UtilityAgent.CallOpts, id)
}

// GetStorageInfo is a free data retrieval call binding the contract method 0xe702c420.
//
// Solidity: function getStorageInfo() view returns((address,string))
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetStorageInfo(opts *bind.CallOpts) (IUtilityAgentStorageInfo, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getStorageInfo")

	if err != nil {
		return *new(IUtilityAgentStorageInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IUtilityAgentStorageInfo)).(*IUtilityAgentStorageInfo)

	return out0, err

}

// GetStorageInfo is a free data retrieval call binding the contract method 0xe702c420.
//
// Solidity: function getStorageInfo() view returns((address,string))
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetStorageInfo() (IUtilityAgentStorageInfo, error) {
	return _ERC20UtilityAgent.Contract.GetStorageInfo(&_ERC20UtilityAgent.CallOpts)
}

// GetStorageInfo is a free data retrieval call binding the contract method 0xe702c420.
//
// Solidity: function getStorageInfo() view returns((address,string))
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetStorageInfo() (IUtilityAgentStorageInfo, error) {
	return _ERC20UtilityAgent.Contract.GetStorageInfo(&_ERC20UtilityAgent.CallOpts)
}

// GetStorageMode is a free data retrieval call binding the contract method 0x481622f9.
//
// Solidity: function getStorageMode() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetStorageMode(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getStorageMode")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetStorageMode is a free data retrieval call binding the contract method 0x481622f9.
//
// Solidity: function getStorageMode() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetStorageMode() (string, error) {
	return _ERC20UtilityAgent.Contract.GetStorageMode(&_ERC20UtilityAgent.CallOpts)
}

// GetStorageMode is a free data retrieval call binding the contract method 0x481622f9.
//
// Solidity: function getStorageMode() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetStorageMode() (string, error) {
	return _ERC20UtilityAgent.Contract.GetStorageMode(&_ERC20UtilityAgent.CallOpts)
}

// GetSystemPrompt is a free data retrieval call binding the contract method 0x07679a64.
//
// Solidity: function getSystemPrompt() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetSystemPrompt(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getSystemPrompt")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetSystemPrompt is a free data retrieval call binding the contract method 0x07679a64.
//
// Solidity: function getSystemPrompt() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetSystemPrompt() (string, error) {
	return _ERC20UtilityAgent.Contract.GetSystemPrompt(&_ERC20UtilityAgent.CallOpts)
}

// GetSystemPrompt is a free data retrieval call binding the contract method 0x07679a64.
//
// Solidity: function getSystemPrompt() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetSystemPrompt() (string, error) {
	return _ERC20UtilityAgent.Contract.GetSystemPrompt(&_ERC20UtilityAgent.CallOpts)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) GetVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "getVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) GetVotes(account common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.GetVotes(&_ERC20UtilityAgent.CallOpts, account)
}

// GetVotes is a free data retrieval call binding the contract method 0x9ab24eb0.
//
// Solidity: function getVotes(address account) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) GetVotes(account common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.GetVotes(&_ERC20UtilityAgent.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Name() (string, error) {
	return _ERC20UtilityAgent.Contract.Name(&_ERC20UtilityAgent.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Name() (string, error) {
	return _ERC20UtilityAgent.Contract.Name(&_ERC20UtilityAgent.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Nonces(owner common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.Nonces(&_ERC20UtilityAgent.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.Nonces(&_ERC20UtilityAgent.CallOpts, owner)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) NumCheckpoints(opts *bind.CallOpts, account common.Address) (uint32, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "numCheckpoints", account)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _ERC20UtilityAgent.Contract.NumCheckpoints(&_ERC20UtilityAgent.CallOpts, account)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address account) view returns(uint32)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) NumCheckpoints(account common.Address) (uint32, error) {
	return _ERC20UtilityAgent.Contract.NumCheckpoints(&_ERC20UtilityAgent.CallOpts, account)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Owner() (common.Address, error) {
	return _ERC20UtilityAgent.Contract.Owner(&_ERC20UtilityAgent.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Owner() (common.Address, error) {
	return _ERC20UtilityAgent.Contract.Owner(&_ERC20UtilityAgent.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Symbol() (string, error) {
	return _ERC20UtilityAgent.Contract.Symbol(&_ERC20UtilityAgent.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) Symbol() (string, error) {
	return _ERC20UtilityAgent.Contract.Symbol(&_ERC20UtilityAgent.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20UtilityAgent.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) TotalSupply() (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.TotalSupply(&_ERC20UtilityAgent.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20UtilityAgent *ERC20UtilityAgentCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20UtilityAgent.Contract.TotalSupply(&_ERC20UtilityAgent.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Approve(&_ERC20UtilityAgent.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Approve(&_ERC20UtilityAgent.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.DecreaseAllowance(&_ERC20UtilityAgent.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.DecreaseAllowance(&_ERC20UtilityAgent.TransactOpts, spender, subtractedValue)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Delegate(&_ERC20UtilityAgent.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Delegate(&_ERC20UtilityAgent.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.DelegateBySig(&_ERC20UtilityAgent.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.DelegateBySig(&_ERC20UtilityAgent.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.IncreaseAllowance(&_ERC20UtilityAgent.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.IncreaseAllowance(&_ERC20UtilityAgent.TransactOpts, spender, addedValue)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Permit(&_ERC20UtilityAgent.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Permit(&_ERC20UtilityAgent.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Prompt is a paid mutator transaction binding the contract method 0x793042c9.
//
// Solidity: function prompt(bytes request) returns(uint256 inferId)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) Prompt(opts *bind.TransactOpts, request []byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "prompt", request)
}

// Prompt is a paid mutator transaction binding the contract method 0x793042c9.
//
// Solidity: function prompt(bytes request) returns(uint256 inferId)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Prompt(request []byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Prompt(&_ERC20UtilityAgent.TransactOpts, request)
}

// Prompt is a paid mutator transaction binding the contract method 0x793042c9.
//
// Solidity: function prompt(bytes request) returns(uint256 inferId)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) Prompt(request []byte) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Prompt(&_ERC20UtilityAgent.TransactOpts, request)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.RenounceOwnership(&_ERC20UtilityAgent.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.RenounceOwnership(&_ERC20UtilityAgent.TransactOpts)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Transfer(&_ERC20UtilityAgent.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.Transfer(&_ERC20UtilityAgent.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.TransferFrom(&_ERC20UtilityAgent.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.TransferFrom(&_ERC20UtilityAgent.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.TransferOwnership(&_ERC20UtilityAgent.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.TransferOwnership(&_ERC20UtilityAgent.TransactOpts, newOwner)
}

// UpdateFileName is a paid mutator transaction binding the contract method 0xf73eb6f3.
//
// Solidity: function updateFileName(string filename) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) UpdateFileName(opts *bind.TransactOpts, filename string) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "updateFileName", filename)
}

// UpdateFileName is a paid mutator transaction binding the contract method 0xf73eb6f3.
//
// Solidity: function updateFileName(string filename) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) UpdateFileName(filename string) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdateFileName(&_ERC20UtilityAgent.TransactOpts, filename)
}

// UpdateFileName is a paid mutator transaction binding the contract method 0xf73eb6f3.
//
// Solidity: function updateFileName(string filename) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) UpdateFileName(filename string) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdateFileName(&_ERC20UtilityAgent.TransactOpts, filename)
}

// UpdateModelAddress is a paid mutator transaction binding the contract method 0xdb367b41.
//
// Solidity: function updateModelAddress(address modelAddress) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) UpdateModelAddress(opts *bind.TransactOpts, modelAddress common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "updateModelAddress", modelAddress)
}

// UpdateModelAddress is a paid mutator transaction binding the contract method 0xdb367b41.
//
// Solidity: function updateModelAddress(address modelAddress) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) UpdateModelAddress(modelAddress common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdateModelAddress(&_ERC20UtilityAgent.TransactOpts, modelAddress)
}

// UpdateModelAddress is a paid mutator transaction binding the contract method 0xdb367b41.
//
// Solidity: function updateModelAddress(address modelAddress) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) UpdateModelAddress(modelAddress common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdateModelAddress(&_ERC20UtilityAgent.TransactOpts, modelAddress)
}

// UpdatePromptScheduler is a paid mutator transaction binding the contract method 0x64058dc0.
//
// Solidity: function updatePromptScheduler(address promptScheduler) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) UpdatePromptScheduler(opts *bind.TransactOpts, promptScheduler common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "updatePromptScheduler", promptScheduler)
}

// UpdatePromptScheduler is a paid mutator transaction binding the contract method 0x64058dc0.
//
// Solidity: function updatePromptScheduler(address promptScheduler) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) UpdatePromptScheduler(promptScheduler common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdatePromptScheduler(&_ERC20UtilityAgent.TransactOpts, promptScheduler)
}

// UpdatePromptScheduler is a paid mutator transaction binding the contract method 0x64058dc0.
//
// Solidity: function updatePromptScheduler(address promptScheduler) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) UpdatePromptScheduler(promptScheduler common.Address) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdatePromptScheduler(&_ERC20UtilityAgent.TransactOpts, promptScheduler)
}

// UpdateSystemPrompt is a paid mutator transaction binding the contract method 0x76a30029.
//
// Solidity: function updateSystemPrompt(string systemPrompt) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactor) UpdateSystemPrompt(opts *bind.TransactOpts, systemPrompt string) (*types.Transaction, error) {
	return _ERC20UtilityAgent.contract.Transact(opts, "updateSystemPrompt", systemPrompt)
}

// UpdateSystemPrompt is a paid mutator transaction binding the contract method 0x76a30029.
//
// Solidity: function updateSystemPrompt(string systemPrompt) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentSession) UpdateSystemPrompt(systemPrompt string) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdateSystemPrompt(&_ERC20UtilityAgent.TransactOpts, systemPrompt)
}

// UpdateSystemPrompt is a paid mutator transaction binding the contract method 0x76a30029.
//
// Solidity: function updateSystemPrompt(string systemPrompt) returns()
func (_ERC20UtilityAgent *ERC20UtilityAgentTransactorSession) UpdateSystemPrompt(systemPrompt string) (*types.Transaction, error) {
	return _ERC20UtilityAgent.Contract.UpdateSystemPrompt(&_ERC20UtilityAgent.TransactOpts, systemPrompt)
}

// ERC20UtilityAgentApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentApprovalIterator struct {
	Event *ERC20UtilityAgentApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentApproval represents a Approval event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20UtilityAgentApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentApprovalIterator{contract: _ERC20UtilityAgent.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentApproval)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseApproval(log types.Log) (*ERC20UtilityAgentApproval, error) {
	event := new(ERC20UtilityAgentApproval)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentDelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentDelegateChangedIterator struct {
	Event *ERC20UtilityAgentDelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentDelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentDelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentDelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentDelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentDelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentDelegateChanged represents a DelegateChanged event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentDelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*ERC20UtilityAgentDelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentDelegateChangedIterator{contract: _ERC20UtilityAgent.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentDelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentDelegateChanged)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseDelegateChanged(log types.Log) (*ERC20UtilityAgentDelegateChanged, error) {
	event := new(ERC20UtilityAgentDelegateChanged)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentDelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentDelegateVotesChangedIterator struct {
	Event *ERC20UtilityAgentDelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentDelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentDelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentDelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentDelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentDelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentDelegateVotesChanged represents a DelegateVotesChanged event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentDelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*ERC20UtilityAgentDelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentDelegateVotesChangedIterator{contract: _ERC20UtilityAgent.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentDelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentDelegateVotesChanged)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseDelegateVotesChanged(log types.Log) (*ERC20UtilityAgentDelegateVotesChanged, error) {
	event := new(ERC20UtilityAgentDelegateVotesChanged)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentEIP712DomainChangedIterator struct {
	Event *ERC20UtilityAgentEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentEIP712DomainChanged represents a EIP712DomainChanged event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*ERC20UtilityAgentEIP712DomainChangedIterator, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentEIP712DomainChangedIterator{contract: _ERC20UtilityAgent.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentEIP712DomainChanged)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseEIP712DomainChanged(log types.Log) (*ERC20UtilityAgentEIP712DomainChanged, error) {
	event := new(ERC20UtilityAgentEIP712DomainChanged)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentModelUpdateIterator is returned from FilterModelUpdate and is used to iterate over the raw logs and unpacked data for ModelUpdate events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentModelUpdateIterator struct {
	Event *ERC20UtilityAgentModelUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentModelUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentModelUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentModelUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentModelUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentModelUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentModelUpdate represents a ModelUpdate event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentModelUpdate struct {
	HybridModel common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterModelUpdate is a free log retrieval operation binding the contract event 0x9e53d9893c64d113368e7309f92b28e4c2f58b339f6e7878fa0d519851c0041e.
//
// Solidity: event ModelUpdate(address hybridModel)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterModelUpdate(opts *bind.FilterOpts) (*ERC20UtilityAgentModelUpdateIterator, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "ModelUpdate")
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentModelUpdateIterator{contract: _ERC20UtilityAgent.contract, event: "ModelUpdate", logs: logs, sub: sub}, nil
}

// WatchModelUpdate is a free log subscription operation binding the contract event 0x9e53d9893c64d113368e7309f92b28e4c2f58b339f6e7878fa0d519851c0041e.
//
// Solidity: event ModelUpdate(address hybridModel)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchModelUpdate(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentModelUpdate) (event.Subscription, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "ModelUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentModelUpdate)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "ModelUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModelUpdate is a log parse operation binding the contract event 0x9e53d9893c64d113368e7309f92b28e4c2f58b339f6e7878fa0d519851c0041e.
//
// Solidity: event ModelUpdate(address hybridModel)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseModelUpdate(log types.Log) (*ERC20UtilityAgentModelUpdate, error) {
	event := new(ERC20UtilityAgentModelUpdate)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "ModelUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentOwnershipTransferredIterator struct {
	Event *ERC20UtilityAgentOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentOwnershipTransferred represents a OwnershipTransferred event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ERC20UtilityAgentOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentOwnershipTransferredIterator{contract: _ERC20UtilityAgent.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentOwnershipTransferred)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseOwnershipTransferred(log types.Log) (*ERC20UtilityAgentOwnershipTransferred, error) {
	event := new(ERC20UtilityAgentOwnershipTransferred)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentPromptPerformedIterator is returned from FilterPromptPerformed and is used to iterate over the raw logs and unpacked data for PromptPerformed events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentPromptPerformedIterator struct {
	Event *ERC20UtilityAgentPromptPerformed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentPromptPerformedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentPromptPerformed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentPromptPerformed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentPromptPerformedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentPromptPerformedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentPromptPerformed represents a PromptPerformed event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentPromptPerformed struct {
	Caller  common.Address
	InferId *big.Int
	Request []byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPromptPerformed is a free log retrieval operation binding the contract event 0x4860455c119cc579add990f3b928c9dc5e46e0cf91525883e40677c4f3d9da1a.
//
// Solidity: event PromptPerformed(address indexed caller, uint256 indexed inferId, bytes request)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterPromptPerformed(opts *bind.FilterOpts, caller []common.Address, inferId []*big.Int) (*ERC20UtilityAgentPromptPerformedIterator, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}
	var inferIdRule []interface{}
	for _, inferIdItem := range inferId {
		inferIdRule = append(inferIdRule, inferIdItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "PromptPerformed", callerRule, inferIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentPromptPerformedIterator{contract: _ERC20UtilityAgent.contract, event: "PromptPerformed", logs: logs, sub: sub}, nil
}

// WatchPromptPerformed is a free log subscription operation binding the contract event 0x4860455c119cc579add990f3b928c9dc5e46e0cf91525883e40677c4f3d9da1a.
//
// Solidity: event PromptPerformed(address indexed caller, uint256 indexed inferId, bytes request)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchPromptPerformed(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentPromptPerformed, caller []common.Address, inferId []*big.Int) (event.Subscription, error) {

	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}
	var inferIdRule []interface{}
	for _, inferIdItem := range inferId {
		inferIdRule = append(inferIdRule, inferIdItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "PromptPerformed", callerRule, inferIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentPromptPerformed)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "PromptPerformed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptPerformed is a log parse operation binding the contract event 0x4860455c119cc579add990f3b928c9dc5e46e0cf91525883e40677c4f3d9da1a.
//
// Solidity: event PromptPerformed(address indexed caller, uint256 indexed inferId, bytes request)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParsePromptPerformed(log types.Log) (*ERC20UtilityAgentPromptPerformed, error) {
	event := new(ERC20UtilityAgentPromptPerformed)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "PromptPerformed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentPromptSchedulerHubUpdateIterator is returned from FilterPromptSchedulerHubUpdate and is used to iterate over the raw logs and unpacked data for PromptSchedulerHubUpdate events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentPromptSchedulerHubUpdateIterator struct {
	Event *ERC20UtilityAgentPromptSchedulerHubUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentPromptSchedulerHubUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentPromptSchedulerHubUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentPromptSchedulerHubUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentPromptSchedulerHubUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentPromptSchedulerHubUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentPromptSchedulerHubUpdate represents a PromptSchedulerHubUpdate event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentPromptSchedulerHubUpdate struct {
	PromptScheduler common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPromptSchedulerHubUpdate is a free log retrieval operation binding the contract event 0xa24feb8bb7bbf04bab48bcaa7011d84461857f4f8524b16b3ca690b969b1c230.
//
// Solidity: event PromptSchedulerHubUpdate(address promptScheduler)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterPromptSchedulerHubUpdate(opts *bind.FilterOpts) (*ERC20UtilityAgentPromptSchedulerHubUpdateIterator, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "PromptSchedulerHubUpdate")
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentPromptSchedulerHubUpdateIterator{contract: _ERC20UtilityAgent.contract, event: "PromptSchedulerHubUpdate", logs: logs, sub: sub}, nil
}

// WatchPromptSchedulerHubUpdate is a free log subscription operation binding the contract event 0xa24feb8bb7bbf04bab48bcaa7011d84461857f4f8524b16b3ca690b969b1c230.
//
// Solidity: event PromptSchedulerHubUpdate(address promptScheduler)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchPromptSchedulerHubUpdate(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentPromptSchedulerHubUpdate) (event.Subscription, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "PromptSchedulerHubUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentPromptSchedulerHubUpdate)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "PromptSchedulerHubUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePromptSchedulerHubUpdate is a log parse operation binding the contract event 0xa24feb8bb7bbf04bab48bcaa7011d84461857f4f8524b16b3ca690b969b1c230.
//
// Solidity: event PromptSchedulerHubUpdate(address promptScheduler)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParsePromptSchedulerHubUpdate(log types.Log) (*ERC20UtilityAgentPromptSchedulerHubUpdate, error) {
	event := new(ERC20UtilityAgentPromptSchedulerHubUpdate)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "PromptSchedulerHubUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentSystemPromptUpdateIterator is returned from FilterSystemPromptUpdate and is used to iterate over the raw logs and unpacked data for SystemPromptUpdate events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentSystemPromptUpdateIterator struct {
	Event *ERC20UtilityAgentSystemPromptUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentSystemPromptUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentSystemPromptUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentSystemPromptUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentSystemPromptUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentSystemPromptUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentSystemPromptUpdate represents a SystemPromptUpdate event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentSystemPromptUpdate struct {
	SystemPrompt string
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSystemPromptUpdate is a free log retrieval operation binding the contract event 0xdf5a31f32f865da404304d8e717e689823eab72d259d756d85fc552ef9ac78d8.
//
// Solidity: event SystemPromptUpdate(string systemPrompt)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterSystemPromptUpdate(opts *bind.FilterOpts) (*ERC20UtilityAgentSystemPromptUpdateIterator, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "SystemPromptUpdate")
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentSystemPromptUpdateIterator{contract: _ERC20UtilityAgent.contract, event: "SystemPromptUpdate", logs: logs, sub: sub}, nil
}

// WatchSystemPromptUpdate is a free log subscription operation binding the contract event 0xdf5a31f32f865da404304d8e717e689823eab72d259d756d85fc552ef9ac78d8.
//
// Solidity: event SystemPromptUpdate(string systemPrompt)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchSystemPromptUpdate(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentSystemPromptUpdate) (event.Subscription, error) {

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "SystemPromptUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentSystemPromptUpdate)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "SystemPromptUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSystemPromptUpdate is a log parse operation binding the contract event 0xdf5a31f32f865da404304d8e717e689823eab72d259d756d85fc552ef9ac78d8.
//
// Solidity: event SystemPromptUpdate(string systemPrompt)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseSystemPromptUpdate(log types.Log) (*ERC20UtilityAgentSystemPromptUpdate, error) {
	event := new(ERC20UtilityAgentSystemPromptUpdate)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "SystemPromptUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20UtilityAgentTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentTransferIterator struct {
	Event *ERC20UtilityAgentTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20UtilityAgentTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20UtilityAgentTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20UtilityAgentTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20UtilityAgentTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20UtilityAgentTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20UtilityAgentTransfer represents a Transfer event raised by the ERC20UtilityAgent contract.
type ERC20UtilityAgentTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20UtilityAgentTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20UtilityAgentTransferIterator{contract: _ERC20UtilityAgent.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20UtilityAgentTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20UtilityAgent.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20UtilityAgentTransfer)
				if err := _ERC20UtilityAgent.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20UtilityAgent *ERC20UtilityAgentFilterer) ParseTransfer(log types.Log) (*ERC20UtilityAgentTransfer, error) {
	event := new(ERC20UtilityAgentTransfer)
	if err := _ERC20UtilityAgent.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
